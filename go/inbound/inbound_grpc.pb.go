// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package inbound

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InboundServerDiscoveryClient is the client API for InboundServerDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InboundServerDiscoveryClient interface {
	GetPort(ctx context.Context, in *PortSpec, opts ...grpc.CallOption) (*Server, error)
	WatchPort(ctx context.Context, in *PortSpec, opts ...grpc.CallOption) (InboundServerDiscovery_WatchPortClient, error)
}

type inboundServerDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewInboundServerDiscoveryClient(cc grpc.ClientConnInterface) InboundServerDiscoveryClient {
	return &inboundServerDiscoveryClient{cc}
}

func (c *inboundServerDiscoveryClient) GetPort(ctx context.Context, in *PortSpec, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/io.linkerd.proxy.inbound.InboundServerDiscovery/GetPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inboundServerDiscoveryClient) WatchPort(ctx context.Context, in *PortSpec, opts ...grpc.CallOption) (InboundServerDiscovery_WatchPortClient, error) {
	stream, err := c.cc.NewStream(ctx, &InboundServerDiscovery_ServiceDesc.Streams[0], "/io.linkerd.proxy.inbound.InboundServerDiscovery/WatchPort", opts...)
	if err != nil {
		return nil, err
	}
	x := &inboundServerDiscoveryWatchPortClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InboundServerDiscovery_WatchPortClient interface {
	Recv() (*Server, error)
	grpc.ClientStream
}

type inboundServerDiscoveryWatchPortClient struct {
	grpc.ClientStream
}

func (x *inboundServerDiscoveryWatchPortClient) Recv() (*Server, error) {
	m := new(Server)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InboundServerDiscoveryServer is the server API for InboundServerDiscovery service.
// All implementations must embed UnimplementedInboundServerDiscoveryServer
// for forward compatibility
type InboundServerDiscoveryServer interface {
	GetPort(context.Context, *PortSpec) (*Server, error)
	WatchPort(*PortSpec, InboundServerDiscovery_WatchPortServer) error
	mustEmbedUnimplementedInboundServerDiscoveryServer()
}

// UnimplementedInboundServerDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedInboundServerDiscoveryServer struct {
}

func (UnimplementedInboundServerDiscoveryServer) GetPort(context.Context, *PortSpec) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPort not implemented")
}
func (UnimplementedInboundServerDiscoveryServer) WatchPort(*PortSpec, InboundServerDiscovery_WatchPortServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPort not implemented")
}
func (UnimplementedInboundServerDiscoveryServer) mustEmbedUnimplementedInboundServerDiscoveryServer() {
}

// UnsafeInboundServerDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InboundServerDiscoveryServer will
// result in compilation errors.
type UnsafeInboundServerDiscoveryServer interface {
	mustEmbedUnimplementedInboundServerDiscoveryServer()
}

func RegisterInboundServerDiscoveryServer(s grpc.ServiceRegistrar, srv InboundServerDiscoveryServer) {
	s.RegisterService(&InboundServerDiscovery_ServiceDesc, srv)
}

func _InboundServerDiscovery_GetPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortSpec)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InboundServerDiscoveryServer).GetPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.linkerd.proxy.inbound.InboundServerDiscovery/GetPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InboundServerDiscoveryServer).GetPort(ctx, req.(*PortSpec))
	}
	return interceptor(ctx, in, info, handler)
}

func _InboundServerDiscovery_WatchPort_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortSpec)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InboundServerDiscoveryServer).WatchPort(m, &inboundServerDiscoveryWatchPortServer{stream})
}

type InboundServerDiscovery_WatchPortServer interface {
	Send(*Server) error
	grpc.ServerStream
}

type inboundServerDiscoveryWatchPortServer struct {
	grpc.ServerStream
}

func (x *inboundServerDiscoveryWatchPortServer) Send(m *Server) error {
	return x.ServerStream.SendMsg(m)
}

// InboundServerDiscovery_ServiceDesc is the grpc.ServiceDesc for InboundServerDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InboundServerDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.inbound.InboundServerDiscovery",
	HandlerType: (*InboundServerDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPort",
			Handler:    _InboundServerDiscovery_GetPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchPort",
			Handler:       _InboundServerDiscovery_WatchPort_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inbound.proto",
}
