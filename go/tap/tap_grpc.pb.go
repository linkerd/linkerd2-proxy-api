// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: tap.proto

package tap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tap_Observe_FullMethodName      = "/io.linkerd.proxy.tap.Tap/Observe"
	Tap_ObserveTrace_FullMethodName = "/io.linkerd.proxy.tap.Tap/ObserveTrace"
)

// TapClient is the client API for Tap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// A service exposed by proxy instances to setup
type TapClient interface {
	Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error)
	ObserveTrace(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ObserveTraceRequest, ObserveTraceResponse], error)
}

type tapClient struct {
	cc grpc.ClientConnInterface
}

func NewTapClient(cc grpc.ClientConnInterface) TapClient {
	return &tapClient{cc}
}

func (c *tapClient) Observe(ctx context.Context, in *ObserveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TapEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tap_ServiceDesc.Streams[0], Tap_Observe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ObserveRequest, TapEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_ObserveClient = grpc.ServerStreamingClient[TapEvent]

func (c *tapClient) ObserveTrace(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ObserveTraceRequest, ObserveTraceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Tap_ServiceDesc.Streams[1], Tap_ObserveTrace_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ObserveTraceRequest, ObserveTraceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_ObserveTraceClient = grpc.ClientStreamingClient[ObserveTraceRequest, ObserveTraceResponse]

// TapServer is the server API for Tap service.
// All implementations must embed UnimplementedTapServer
// for forward compatibility.
//
// A service exposed by proxy instances to setup
type TapServer interface {
	Observe(*ObserveRequest, grpc.ServerStreamingServer[TapEvent]) error
	ObserveTrace(grpc.ClientStreamingServer[ObserveTraceRequest, ObserveTraceResponse]) error
	mustEmbedUnimplementedTapServer()
}

// UnimplementedTapServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTapServer struct{}

func (UnimplementedTapServer) Observe(*ObserveRequest, grpc.ServerStreamingServer[TapEvent]) error {
	return status.Errorf(codes.Unimplemented, "method Observe not implemented")
}
func (UnimplementedTapServer) ObserveTrace(grpc.ClientStreamingServer[ObserveTraceRequest, ObserveTraceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ObserveTrace not implemented")
}
func (UnimplementedTapServer) mustEmbedUnimplementedTapServer() {}
func (UnimplementedTapServer) testEmbeddedByValue()             {}

// UnsafeTapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapServer will
// result in compilation errors.
type UnsafeTapServer interface {
	mustEmbedUnimplementedTapServer()
}

func RegisterTapServer(s grpc.ServiceRegistrar, srv TapServer) {
	// If the following call pancis, it indicates UnimplementedTapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tap_ServiceDesc, srv)
}

func _Tap_Observe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TapServer).Observe(m, &grpc.GenericServerStream[ObserveRequest, TapEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_ObserveServer = grpc.ServerStreamingServer[TapEvent]

func _Tap_ObserveTrace_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TapServer).ObserveTrace(&grpc.GenericServerStream[ObserveTraceRequest, ObserveTraceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Tap_ObserveTraceServer = grpc.ClientStreamingServer[ObserveTraceRequest, ObserveTraceResponse]

// Tap_ServiceDesc is the grpc.ServiceDesc for Tap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.tap.Tap",
	HandlerType: (*TapServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Observe",
			Handler:       _Tap_Observe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ObserveTrace",
			Handler:       _Tap_ObserveTrace_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tap.proto",
}

const (
	Instrument_Watch_FullMethodName = "/io.linkerd.proxy.tap.Instrument/Watch"
)

// InstrumentClient is the client API for Instrument service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResposne], error)
}

type instrumentClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentClient(cc grpc.ClientConnInterface) InstrumentClient {
	return &instrumentClient{cc}
}

func (c *instrumentClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchResposne], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Instrument_ServiceDesc.Streams[0], Instrument_Watch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchRequest, WatchResposne]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Instrument_WatchClient = grpc.ServerStreamingClient[WatchResposne]

// InstrumentServer is the server API for Instrument service.
// All implementations must embed UnimplementedInstrumentServer
// for forward compatibility.
type InstrumentServer interface {
	Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResposne]) error
	mustEmbedUnimplementedInstrumentServer()
}

// UnimplementedInstrumentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstrumentServer struct{}

func (UnimplementedInstrumentServer) Watch(*WatchRequest, grpc.ServerStreamingServer[WatchResposne]) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedInstrumentServer) mustEmbedUnimplementedInstrumentServer() {}
func (UnimplementedInstrumentServer) testEmbeddedByValue()                    {}

// UnsafeInstrumentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentServer will
// result in compilation errors.
type UnsafeInstrumentServer interface {
	mustEmbedUnimplementedInstrumentServer()
}

func RegisterInstrumentServer(s grpc.ServiceRegistrar, srv InstrumentServer) {
	// If the following call pancis, it indicates UnimplementedInstrumentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Instrument_ServiceDesc, srv)
}

func _Instrument_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InstrumentServer).Watch(m, &grpc.GenericServerStream[WatchRequest, WatchResposne]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Instrument_WatchServer = grpc.ServerStreamingServer[WatchResposne]

// Instrument_ServiceDesc is the grpc.ServiceDesc for Instrument service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Instrument_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.tap.Instrument",
	HandlerType: (*InstrumentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Instrument_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tap.proto",
}
