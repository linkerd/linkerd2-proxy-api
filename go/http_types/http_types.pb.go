// Code generated by protoc-gen-go. DO NOT EDIT.
// source: http_types.proto

package http_types // import "github.com/linkerd/linkerd2-proxy-api/go/http_types"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HttpMethod_Registered int32

const (
	HttpMethod_GET     HttpMethod_Registered = 0
	HttpMethod_POST    HttpMethod_Registered = 1
	HttpMethod_PUT     HttpMethod_Registered = 2
	HttpMethod_DELETE  HttpMethod_Registered = 3
	HttpMethod_PATCH   HttpMethod_Registered = 4
	HttpMethod_OPTIONS HttpMethod_Registered = 5
	HttpMethod_CONNECT HttpMethod_Registered = 6
	HttpMethod_HEAD    HttpMethod_Registered = 7
	HttpMethod_TRACE   HttpMethod_Registered = 8
)

var HttpMethod_Registered_name = map[int32]string{
	0: "GET",
	1: "POST",
	2: "PUT",
	3: "DELETE",
	4: "PATCH",
	5: "OPTIONS",
	6: "CONNECT",
	7: "HEAD",
	8: "TRACE",
}
var HttpMethod_Registered_value = map[string]int32{
	"GET":     0,
	"POST":    1,
	"PUT":     2,
	"DELETE":  3,
	"PATCH":   4,
	"OPTIONS": 5,
	"CONNECT": 6,
	"HEAD":    7,
	"TRACE":   8,
}

func (x HttpMethod_Registered) String() string {
	return proto.EnumName(HttpMethod_Registered_name, int32(x))
}
func (HttpMethod_Registered) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_http_types_1aa39c1a8b7d0445, []int{0, 0}
}

type Scheme_Registered int32

const (
	Scheme_HTTP  Scheme_Registered = 0
	Scheme_HTTPS Scheme_Registered = 1
)

var Scheme_Registered_name = map[int32]string{
	0: "HTTP",
	1: "HTTPS",
}
var Scheme_Registered_value = map[string]int32{
	"HTTP":  0,
	"HTTPS": 1,
}

func (x Scheme_Registered) String() string {
	return proto.EnumName(Scheme_Registered_name, int32(x))
}
func (Scheme_Registered) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_http_types_1aa39c1a8b7d0445, []int{1, 0}
}

type HttpMethod struct {
	// Types that are valid to be assigned to Type:
	//	*HttpMethod_Registered_
	//	*HttpMethod_Unregistered
	Type                 isHttpMethod_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HttpMethod) Reset()         { *m = HttpMethod{} }
func (m *HttpMethod) String() string { return proto.CompactTextString(m) }
func (*HttpMethod) ProtoMessage()    {}
func (*HttpMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_types_1aa39c1a8b7d0445, []int{0}
}
func (m *HttpMethod) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpMethod.Unmarshal(m, b)
}
func (m *HttpMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpMethod.Marshal(b, m, deterministic)
}
func (dst *HttpMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMethod.Merge(dst, src)
}
func (m *HttpMethod) XXX_Size() int {
	return xxx_messageInfo_HttpMethod.Size(m)
}
func (m *HttpMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMethod.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMethod proto.InternalMessageInfo

type isHttpMethod_Type interface {
	isHttpMethod_Type()
}

type HttpMethod_Registered_ struct {
	Registered HttpMethod_Registered `protobuf:"varint,1,opt,name=registered,proto3,enum=io.linkerd.proxy.http_types.HttpMethod_Registered,oneof"`
}

type HttpMethod_Unregistered struct {
	Unregistered string `protobuf:"bytes,2,opt,name=unregistered,proto3,oneof"`
}

func (*HttpMethod_Registered_) isHttpMethod_Type() {}

func (*HttpMethod_Unregistered) isHttpMethod_Type() {}

func (m *HttpMethod) GetType() isHttpMethod_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HttpMethod) GetRegistered() HttpMethod_Registered {
	if x, ok := m.GetType().(*HttpMethod_Registered_); ok {
		return x.Registered
	}
	return HttpMethod_GET
}

func (m *HttpMethod) GetUnregistered() string {
	if x, ok := m.GetType().(*HttpMethod_Unregistered); ok {
		return x.Unregistered
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpMethod) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpMethod_OneofMarshaler, _HttpMethod_OneofUnmarshaler, _HttpMethod_OneofSizer, []interface{}{
		(*HttpMethod_Registered_)(nil),
		(*HttpMethod_Unregistered)(nil),
	}
}

func _HttpMethod_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpMethod)
	// type
	switch x := m.Type.(type) {
	case *HttpMethod_Registered_:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Registered))
	case *HttpMethod_Unregistered:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Unregistered)
	case nil:
	default:
		return fmt.Errorf("HttpMethod.Type has unexpected type %T", x)
	}
	return nil
}

func _HttpMethod_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpMethod)
	switch tag {
	case 1: // type.registered
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &HttpMethod_Registered_{HttpMethod_Registered(x)}
		return true, err
	case 2: // type.unregistered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &HttpMethod_Unregistered{x}
		return true, err
	default:
		return false, nil
	}
}

func _HttpMethod_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpMethod)
	// type
	switch x := m.Type.(type) {
	case *HttpMethod_Registered_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Registered))
	case *HttpMethod_Unregistered:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Unregistered)))
		n += len(x.Unregistered)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Scheme struct {
	// Types that are valid to be assigned to Type:
	//	*Scheme_Registered_
	//	*Scheme_Unregistered
	Type                 isScheme_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Scheme) Reset()         { *m = Scheme{} }
func (m *Scheme) String() string { return proto.CompactTextString(m) }
func (*Scheme) ProtoMessage()    {}
func (*Scheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_types_1aa39c1a8b7d0445, []int{1}
}
func (m *Scheme) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Scheme.Unmarshal(m, b)
}
func (m *Scheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Scheme.Marshal(b, m, deterministic)
}
func (dst *Scheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scheme.Merge(dst, src)
}
func (m *Scheme) XXX_Size() int {
	return xxx_messageInfo_Scheme.Size(m)
}
func (m *Scheme) XXX_DiscardUnknown() {
	xxx_messageInfo_Scheme.DiscardUnknown(m)
}

var xxx_messageInfo_Scheme proto.InternalMessageInfo

type isScheme_Type interface {
	isScheme_Type()
}

type Scheme_Registered_ struct {
	Registered Scheme_Registered `protobuf:"varint,1,opt,name=registered,proto3,enum=io.linkerd.proxy.http_types.Scheme_Registered,oneof"`
}

type Scheme_Unregistered struct {
	Unregistered string `protobuf:"bytes,2,opt,name=unregistered,proto3,oneof"`
}

func (*Scheme_Registered_) isScheme_Type() {}

func (*Scheme_Unregistered) isScheme_Type() {}

func (m *Scheme) GetType() isScheme_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Scheme) GetRegistered() Scheme_Registered {
	if x, ok := m.GetType().(*Scheme_Registered_); ok {
		return x.Registered
	}
	return Scheme_HTTP
}

func (m *Scheme) GetUnregistered() string {
	if x, ok := m.GetType().(*Scheme_Unregistered); ok {
		return x.Unregistered
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Scheme) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Scheme_OneofMarshaler, _Scheme_OneofUnmarshaler, _Scheme_OneofSizer, []interface{}{
		(*Scheme_Registered_)(nil),
		(*Scheme_Unregistered)(nil),
	}
}

func _Scheme_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Scheme)
	// type
	switch x := m.Type.(type) {
	case *Scheme_Registered_:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Registered))
	case *Scheme_Unregistered:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Unregistered)
	case nil:
	default:
		return fmt.Errorf("Scheme.Type has unexpected type %T", x)
	}
	return nil
}

func _Scheme_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Scheme)
	switch tag {
	case 1: // type.registered
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Scheme_Registered_{Scheme_Registered(x)}
		return true, err
	case 2: // type.unregistered
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Type = &Scheme_Unregistered{x}
		return true, err
	default:
		return false, nil
	}
}

func _Scheme_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Scheme)
	// type
	switch x := m.Type.(type) {
	case *Scheme_Registered_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Registered))
	case *Scheme_Unregistered:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Unregistered)))
		n += len(x.Unregistered)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HttpMethod)(nil), "io.linkerd.proxy.http_types.HttpMethod")
	proto.RegisterType((*Scheme)(nil), "io.linkerd.proxy.http_types.Scheme")
	proto.RegisterEnum("io.linkerd.proxy.http_types.HttpMethod_Registered", HttpMethod_Registered_name, HttpMethod_Registered_value)
	proto.RegisterEnum("io.linkerd.proxy.http_types.Scheme_Registered", Scheme_Registered_name, Scheme_Registered_value)
}

func init() { proto.RegisterFile("http_types.proto", fileDescriptor_http_types_1aa39c1a8b7d0445) }

var fileDescriptor_http_types_1aa39c1a8b7d0445 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x6b, 0xfa, 0x30,
	0x18, 0xc7, 0x1b, 0xff, 0x54, 0x7d, 0x7e, 0x3f, 0xc6, 0x43, 0x4e, 0x83, 0x5d, 0x9c, 0xec, 0xe0,
	0xc5, 0x08, 0xca, 0x5e, 0x80, 0xd6, 0xb0, 0x0e, 0x36, 0x1b, 0xda, 0xec, 0xb2, 0xcb, 0x98, 0x36,
	0xb4, 0x65, 0xb3, 0x29, 0x35, 0xc2, 0xbc, 0xed, 0xfd, 0xec, 0x4d, 0x8e, 0xb8, 0xb9, 0x2a, 0x0c,
	0x2f, 0x3b, 0x25, 0x79, 0x78, 0xbe, 0x5f, 0x3e, 0x1f, 0x08, 0x60, 0x6a, 0x4c, 0xf1, 0x64, 0xb6,
	0x85, 0x5a, 0xb3, 0xa2, 0xd4, 0x46, 0xd3, 0x8b, 0x4c, 0xb3, 0xd7, 0x2c, 0x7f, 0x51, 0x65, 0x6c,
	0x27, 0x6f, 0x5b, 0x56, 0xad, 0xf4, 0xde, 0x6b, 0x00, 0xbe, 0x31, 0xc5, 0xbd, 0x32, 0xa9, 0x8e,
	0xa9, 0x04, 0x28, 0x55, 0x92, 0xad, 0x8d, 0x2a, 0x55, 0x7c, 0x4e, 0xba, 0xa4, 0x7f, 0x36, 0x1a,
	0xb1, 0x13, 0x05, 0xac, 0x0a, 0xb3, 0xf0, 0x27, 0xe9, 0x3b, 0xe1, 0x41, 0x0f, 0xbd, 0x82, 0xff,
	0x9b, 0xfc, 0xa0, 0xb7, 0xd6, 0x25, 0xfd, 0x8e, 0xef, 0x84, 0x47, 0xd3, 0x5e, 0x0e, 0x50, 0x35,
	0xd0, 0x16, 0xd4, 0x6f, 0xb8, 0x44, 0x87, 0xb6, 0xa1, 0x21, 0x82, 0x48, 0x22, 0xb1, 0x23, 0xf1,
	0x20, 0xb1, 0x46, 0x01, 0xdc, 0x19, 0xbf, 0xe3, 0x92, 0x63, 0x9d, 0x76, 0xa0, 0x29, 0x26, 0xd2,
	0xf3, 0xb1, 0x41, 0xff, 0x41, 0x2b, 0x10, 0xf2, 0x36, 0x98, 0x47, 0xd8, 0xb4, 0x0f, 0x2f, 0x98,
	0xcf, 0xb9, 0x27, 0xd1, 0xb5, 0x1d, 0x3e, 0x9f, 0xcc, 0xb0, 0x65, 0xd7, 0x65, 0x38, 0xf1, 0x38,
	0xb6, 0xa7, 0x2e, 0x34, 0xac, 0x42, 0xef, 0x83, 0x80, 0x1b, 0x2d, 0x53, 0xb5, 0x52, 0x54, 0xfc,
	0xa2, 0xcf, 0x4e, 0xea, 0x7f, 0x05, 0xff, 0xaa, 0x7e, 0x79, 0xa4, 0x6e, 0x69, 0xa5, 0x14, 0xe8,
	0x58, 0x5a, 0x7b, 0x8b, 0x90, 0xec, 0x69, 0xa7, 0xd7, 0x8f, 0xe3, 0x24, 0x33, 0xe9, 0x66, 0xc1,
	0x96, 0x7a, 0x35, 0xfc, 0xe6, 0xda, 0x9f, 0xa3, 0xc1, 0x0e, 0x70, 0xf0, 0x5c, 0x64, 0xc3, 0x44,
	0x0f, 0x2b, 0xce, 0x85, 0xbb, 0xfb, 0x0b, 0xe3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x87,
	0x83, 0x2e, 0x1f, 0x02, 0x00, 0x00,
}
