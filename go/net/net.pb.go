// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.30.2
// source: net.proto

package net

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IPAddress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Ip:
	//
	//	*IPAddress_Ipv4
	//	*IPAddress_Ipv6
	Ip            isIPAddress_Ip `protobuf_oneof:"ip"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	mi := &file_net_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{0}
}

func (x *IPAddress) GetIp() isIPAddress_Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPAddress) GetIpv4() uint32 {
	if x != nil {
		if x, ok := x.Ip.(*IPAddress_Ipv4); ok {
			return x.Ipv4
		}
	}
	return 0
}

func (x *IPAddress) GetIpv6() *IPv6 {
	if x != nil {
		if x, ok := x.Ip.(*IPAddress_Ipv6); ok {
			return x.Ipv6
		}
	}
	return nil
}

type isIPAddress_Ip interface {
	isIPAddress_Ip()
}

type IPAddress_Ipv4 struct {
	Ipv4 uint32 `protobuf:"fixed32,1,opt,name=ipv4,proto3,oneof"`
}

type IPAddress_Ipv6 struct {
	Ipv6 *IPv6 `protobuf:"bytes,2,opt,name=ipv6,proto3,oneof"`
}

func (*IPAddress_Ipv4) isIPAddress_Ip() {}

func (*IPAddress_Ipv6) isIPAddress_Ip() {}

type IPNetwork struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *IPAddress             `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	PrefixLen     uint32                 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPNetwork) Reset() {
	*x = IPNetwork{}
	mi := &file_net_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPNetwork) ProtoMessage() {}

func (x *IPNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPNetwork.ProtoReflect.Descriptor instead.
func (*IPNetwork) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{1}
}

func (x *IPNetwork) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *IPNetwork) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

type IPv6 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	First         uint64                 `protobuf:"fixed64,1,opt,name=first,proto3" json:"first,omitempty"` // hextets 1-4
	Last          uint64                 `protobuf:"fixed64,2,opt,name=last,proto3" json:"last,omitempty"`   // hextets 5-8
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPv6) Reset() {
	*x = IPv6{}
	mi := &file_net_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6) ProtoMessage() {}

func (x *IPv6) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6.ProtoReflect.Descriptor instead.
func (*IPv6) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{2}
}

func (x *IPv6) GetFirst() uint64 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *IPv6) GetLast() uint64 {
	if x != nil {
		return x.Last
	}
	return 0
}

type TcpAddress struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ip            *IPAddress             `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpAddress) Reset() {
	*x = TcpAddress{}
	mi := &file_net_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpAddress) ProtoMessage() {}

func (x *TcpAddress) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpAddress.ProtoReflect.Descriptor instead.
func (*TcpAddress) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{3}
}

func (x *TcpAddress) GetIp() *IPAddress {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *TcpAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_net_proto protoreflect.FileDescriptor

const file_net_proto_rawDesc = "" +
	"\n" +
	"\tnet.proto\x12\x14io.linkerd.proxy.net\"Y\n" +
	"\tIPAddress\x12\x14\n" +
	"\x04ipv4\x18\x01 \x01(\aH\x00R\x04ipv4\x120\n" +
	"\x04ipv6\x18\x02 \x01(\v2\x1a.io.linkerd.proxy.net.IPv6H\x00R\x04ipv6B\x04\n" +
	"\x02ip\"[\n" +
	"\tIPNetwork\x12/\n" +
	"\x02ip\x18\x01 \x01(\v2\x1f.io.linkerd.proxy.net.IPAddressR\x02ip\x12\x1d\n" +
	"\n" +
	"prefix_len\x18\x02 \x01(\rR\tprefixLen\"0\n" +
	"\x04IPv6\x12\x14\n" +
	"\x05first\x18\x01 \x01(\x06R\x05first\x12\x12\n" +
	"\x04last\x18\x02 \x01(\x06R\x04last\"Q\n" +
	"\n" +
	"TcpAddress\x12/\n" +
	"\x02ip\x18\x01 \x01(\v2\x1f.io.linkerd.proxy.net.IPAddressR\x02ip\x12\x12\n" +
	"\x04port\x18\x02 \x01(\rR\x04portB.Z,github.com/linkerd/linkerd2-proxy-api/go/netb\x06proto3"

var (
	file_net_proto_rawDescOnce sync.Once
	file_net_proto_rawDescData []byte
)

func file_net_proto_rawDescGZIP() []byte {
	file_net_proto_rawDescOnce.Do(func() {
		file_net_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_net_proto_rawDesc), len(file_net_proto_rawDesc)))
	})
	return file_net_proto_rawDescData
}

var file_net_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_net_proto_goTypes = []any{
	(*IPAddress)(nil),  // 0: io.linkerd.proxy.net.IPAddress
	(*IPNetwork)(nil),  // 1: io.linkerd.proxy.net.IPNetwork
	(*IPv6)(nil),       // 2: io.linkerd.proxy.net.IPv6
	(*TcpAddress)(nil), // 3: io.linkerd.proxy.net.TcpAddress
}
var file_net_proto_depIdxs = []int32{
	2, // 0: io.linkerd.proxy.net.IPAddress.ipv6:type_name -> io.linkerd.proxy.net.IPv6
	0, // 1: io.linkerd.proxy.net.IPNetwork.ip:type_name -> io.linkerd.proxy.net.IPAddress
	0, // 2: io.linkerd.proxy.net.TcpAddress.ip:type_name -> io.linkerd.proxy.net.IPAddress
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_net_proto_init() }
func file_net_proto_init() {
	if File_net_proto != nil {
		return
	}
	file_net_proto_msgTypes[0].OneofWrappers = []any{
		(*IPAddress_Ipv4)(nil),
		(*IPAddress_Ipv6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_net_proto_rawDesc), len(file_net_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_net_proto_goTypes,
		DependencyIndexes: file_net_proto_depIdxs,
		MessageInfos:      file_net_proto_msgTypes,
	}.Build()
	File_net_proto = out.File
	file_net_proto_goTypes = nil
	file_net_proto_depIdxs = nil
}
