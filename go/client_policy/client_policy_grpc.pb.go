// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: client_policy.proto

package client_policy

import (
	context "context"
	destination "github.com/linkerd/linkerd2-proxy-api/go/destination"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientPoliciesClient is the client API for ClientPolicies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientPoliciesClient interface {
	// Given a destination, return the ClientPolicy that is attached to that
	// destination and send an update whenever it changes.
	GetClientPolicy(ctx context.Context, in *destination.GetDestination, opts ...grpc.CallOption) (ClientPolicies_GetClientPolicyClient, error)
}

type clientPoliciesClient struct {
	cc grpc.ClientConnInterface
}

func NewClientPoliciesClient(cc grpc.ClientConnInterface) ClientPoliciesClient {
	return &clientPoliciesClient{cc}
}

func (c *clientPoliciesClient) GetClientPolicy(ctx context.Context, in *destination.GetDestination, opts ...grpc.CallOption) (ClientPolicies_GetClientPolicyClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientPolicies_ServiceDesc.Streams[0], "/io.linkerd.proxy.client_policy.ClientPolicies/GetClientPolicy", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientPoliciesGetClientPolicyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClientPolicies_GetClientPolicyClient interface {
	Recv() (*ClientPolicy, error)
	grpc.ClientStream
}

type clientPoliciesGetClientPolicyClient struct {
	grpc.ClientStream
}

func (x *clientPoliciesGetClientPolicyClient) Recv() (*ClientPolicy, error) {
	m := new(ClientPolicy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientPoliciesServer is the server API for ClientPolicies service.
// All implementations must embed UnimplementedClientPoliciesServer
// for forward compatibility
type ClientPoliciesServer interface {
	// Given a destination, return the ClientPolicy that is attached to that
	// destination and send an update whenever it changes.
	GetClientPolicy(*destination.GetDestination, ClientPolicies_GetClientPolicyServer) error
	mustEmbedUnimplementedClientPoliciesServer()
}

// UnimplementedClientPoliciesServer must be embedded to have forward compatible implementations.
type UnimplementedClientPoliciesServer struct {
}

func (UnimplementedClientPoliciesServer) GetClientPolicy(*destination.GetDestination, ClientPolicies_GetClientPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetClientPolicy not implemented")
}
func (UnimplementedClientPoliciesServer) mustEmbedUnimplementedClientPoliciesServer() {}

// UnsafeClientPoliciesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientPoliciesServer will
// result in compilation errors.
type UnsafeClientPoliciesServer interface {
	mustEmbedUnimplementedClientPoliciesServer()
}

func RegisterClientPoliciesServer(s grpc.ServiceRegistrar, srv ClientPoliciesServer) {
	s.RegisterService(&ClientPolicies_ServiceDesc, srv)
}

func _ClientPolicies_GetClientPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(destination.GetDestination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClientPoliciesServer).GetClientPolicy(m, &clientPoliciesGetClientPolicyServer{stream})
}

type ClientPolicies_GetClientPolicyServer interface {
	Send(*ClientPolicy) error
	grpc.ServerStream
}

type clientPoliciesGetClientPolicyServer struct {
	grpc.ServerStream
}

func (x *clientPoliciesGetClientPolicyServer) Send(m *ClientPolicy) error {
	return x.ServerStream.SendMsg(m)
}

// ClientPolicies_ServiceDesc is the grpc.ServiceDesc for ClientPolicies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientPolicies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.client_policy.ClientPolicies",
	HandlerType: (*ClientPoliciesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetClientPolicy",
			Handler:       _ClientPolicies_GetClientPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "client_policy.proto",
}
