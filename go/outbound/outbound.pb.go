// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: outbound.proto

package outbound

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	destination "github.com/linkerd/linkerd2-proxy-api/go/destination"
	http_route "github.com/linkerd/linkerd2-proxy-api/go/http_route"
	meta "github.com/linkerd/linkerd2-proxy-api/go/meta"
	net "github.com/linkerd/linkerd2-proxy-api/go/net"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the source proxy workload (e.g., pod name).
	Workload string `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Target address
	Address *net.IPAddress `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Target port
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TargetSpec) Reset() {
	*x = TargetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSpec) ProtoMessage() {}

func (x *TargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSpec.ProtoReflect.Descriptor instead.
func (*TargetSpec) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{0}
}

func (x *TargetSpec) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (x *TargetSpec) GetAddress() *net.IPAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *TargetSpec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol    *ProxyProtocol           `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RetryBudget *destination.RetryBudget `protobuf:"bytes,2,opt,name=retry_budget,json=retryBudget,proto3" json:"retry_budget,omitempty"`
	// Backends for this service. Can be overridden by backends specified
	// in a matching route.
	Backends []*Backend `protobuf:"bytes,3,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{1}
}

func (x *Service) GetProtocol() *ProxyProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Service) GetRetryBudget() *destination.RetryBudget {
	if x != nil {
		return x.RetryBudget
	}
	return nil
}

func (x *Service) GetBackends() []*Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

type ProxyProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ProxyProtocol_Detect_
	//	*ProxyProtocol_Opaque_
	//	*ProxyProtocol_Tls_
	//	*ProxyProtocol_Http1_
	//	*ProxyProtocol_Http2_
	Kind isProxyProtocol_Kind `protobuf_oneof:"kind"`
}

func (x *ProxyProtocol) Reset() {
	*x = ProxyProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol) ProtoMessage() {}

func (x *ProxyProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol.ProtoReflect.Descriptor instead.
func (*ProxyProtocol) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2}
}

func (m *ProxyProtocol) GetKind() isProxyProtocol_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ProxyProtocol) GetDetect() *ProxyProtocol_Detect {
	if x, ok := x.GetKind().(*ProxyProtocol_Detect_); ok {
		return x.Detect
	}
	return nil
}

func (x *ProxyProtocol) GetOpaque() *ProxyProtocol_Opaque {
	if x, ok := x.GetKind().(*ProxyProtocol_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

func (x *ProxyProtocol) GetTls() *ProxyProtocol_Tls {
	if x, ok := x.GetKind().(*ProxyProtocol_Tls_); ok {
		return x.Tls
	}
	return nil
}

func (x *ProxyProtocol) GetHttp1() *ProxyProtocol_Http1 {
	if x, ok := x.GetKind().(*ProxyProtocol_Http1_); ok {
		return x.Http1
	}
	return nil
}

func (x *ProxyProtocol) GetHttp2() *ProxyProtocol_Http2 {
	if x, ok := x.GetKind().(*ProxyProtocol_Http2_); ok {
		return x.Http2
	}
	return nil
}

type isProxyProtocol_Kind interface {
	isProxyProtocol_Kind()
}

type ProxyProtocol_Detect_ struct {
	Detect *ProxyProtocol_Detect `protobuf:"bytes,1,opt,name=detect,proto3,oneof"`
}

type ProxyProtocol_Opaque_ struct {
	Opaque *ProxyProtocol_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

type ProxyProtocol_Tls_ struct {
	Tls *ProxyProtocol_Tls `protobuf:"bytes,3,opt,name=tls,proto3,oneof"`
}

type ProxyProtocol_Http1_ struct {
	Http1 *ProxyProtocol_Http1 `protobuf:"bytes,4,opt,name=http1,proto3,oneof"`
}

type ProxyProtocol_Http2_ struct {
	Http2 *ProxyProtocol_Http2 `protobuf:"bytes,5,opt,name=http2,proto3,oneof"`
}

func (*ProxyProtocol_Detect_) isProxyProtocol_Kind() {}

func (*ProxyProtocol_Opaque_) isProxyProtocol_Kind() {}

func (*ProxyProtocol_Tls_) isProxyProtocol_Kind() {}

func (*ProxyProtocol_Http1_) isProxyProtocol_Kind() {}

func (*ProxyProtocol_Http2_) isProxyProtocol_Kind() {}

// Outbound-specific HTTP route configuration (based on the [Gateway API][api]).
//
// [api]: https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRoute
type HttpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *meta.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If empty, the host value is ignored.
	Hosts []*http_route.HostMatch `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Types that are assignable to Rule:
	//	*HttpRoute_HttpRoute
	//	*HttpRoute_ServiceProfile
	Rule            isHttpRoute_Rule             `protobuf_oneof:"rule"`
	ResponseClasses []*destination.ResponseClass `protobuf:"bytes,5,rep,name=response_classes,json=responseClasses,proto3" json:"response_classes,omitempty"`
	// If a route is retryable, any failed requests on that route may be retried
	// by the proxy.
	IsRetryable bool `protobuf:"varint,6,opt,name=is_retryable,json=isRetryable,proto3" json:"is_retryable,omitempty"`
	// After this time has elapsed since receiving the initial request, any
	// outstanding request will be cancelled, a timeout error response will be
	// returned, and no more retries will be attempted.
	Timeout *duration.Duration `protobuf:"bytes,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *HttpRoute) Reset() {
	*x = HttpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute) ProtoMessage() {}

func (x *HttpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute.ProtoReflect.Descriptor instead.
func (*HttpRoute) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3}
}

func (x *HttpRoute) GetMetadata() *meta.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HttpRoute) GetHosts() []*http_route.HostMatch {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (m *HttpRoute) GetRule() isHttpRoute_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (x *HttpRoute) GetHttpRoute() *HttpRoute_HttpRouteRule {
	if x, ok := x.GetRule().(*HttpRoute_HttpRoute); ok {
		return x.HttpRoute
	}
	return nil
}

func (x *HttpRoute) GetServiceProfile() *HttpRoute_ServiceProfileRule {
	if x, ok := x.GetRule().(*HttpRoute_ServiceProfile); ok {
		return x.ServiceProfile
	}
	return nil
}

func (x *HttpRoute) GetResponseClasses() []*destination.ResponseClass {
	if x != nil {
		return x.ResponseClasses
	}
	return nil
}

func (x *HttpRoute) GetIsRetryable() bool {
	if x != nil {
		return x.IsRetryable
	}
	return false
}

func (x *HttpRoute) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type isHttpRoute_Rule interface {
	isHttpRoute_Rule()
}

type HttpRoute_HttpRoute struct {
	// This route was configured by an HTTPRoute resource.
	HttpRoute *HttpRoute_HttpRouteRule `protobuf:"bytes,3,opt,name=http_route,json=httpRoute,proto3,oneof"`
}

type HttpRoute_ServiceProfile struct {
	// This route was configured by a ServiceProfile resource.
	ServiceProfile *HttpRoute_ServiceProfileRule `protobuf:"bytes,4,opt,name=service_profile,json=serviceProfile,proto3,oneof"`
}

func (*HttpRoute_HttpRoute) isHttpRoute_Rule() {}

func (*HttpRoute_ServiceProfile) isHttpRoute_Rule() {}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//	*Backend_Dst
	//	*Backend_Endpoint
	Backend isBackend_Backend `protobuf_oneof:"backend"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{4}
}

func (m *Backend) GetBackend() isBackend_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *Backend) GetDst() *destination.WeightedDst {
	if x, ok := x.GetBackend().(*Backend_Dst); ok {
		return x.Dst
	}
	return nil
}

func (x *Backend) GetEndpoint() *destination.WeightedAddr {
	if x, ok := x.GetBackend().(*Backend_Endpoint); ok {
		return x.Endpoint
	}
	return nil
}

type isBackend_Backend interface {
	isBackend_Backend()
}

type Backend_Dst struct {
	Dst *destination.WeightedDst `protobuf:"bytes,1,opt,name=dst,proto3,oneof"`
}

type Backend_Endpoint struct {
	Endpoint *destination.WeightedAddr `protobuf:"bytes,2,opt,name=endpoint,proto3,oneof"`
}

func (*Backend_Dst) isBackend_Backend() {}

func (*Backend_Endpoint) isBackend_Backend() {}

type ProxyProtocol_Detect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout *duration.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// If the protocol detected as HTTP, a list of HTTP routes that should be
	// matched.
	HttpRoutes []*HttpRoute `protobuf:"bytes,2,rep,name=http_routes,json=httpRoutes,proto3" json:"http_routes,omitempty"`
}

func (x *ProxyProtocol_Detect) Reset() {
	*x = ProxyProtocol_Detect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Detect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Detect) ProtoMessage() {}

func (x *ProxyProtocol_Detect) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Detect.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Detect) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ProxyProtocol_Detect) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ProxyProtocol_Detect) GetHttpRoutes() []*HttpRoute {
	if x != nil {
		return x.HttpRoutes
	}
	return nil
}

type ProxyProtocol_Http1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*HttpRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *ProxyProtocol_Http1) Reset() {
	*x = ProxyProtocol_Http1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Http1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Http1) ProtoMessage() {}

func (x *ProxyProtocol_Http1) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Http1.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Http1) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ProxyProtocol_Http1) GetRoutes() []*HttpRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type ProxyProtocol_Http2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*HttpRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *ProxyProtocol_Http2) Reset() {
	*x = ProxyProtocol_Http2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Http2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Http2) ProtoMessage() {}

func (x *ProxyProtocol_Http2) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Http2.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Http2) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ProxyProtocol_Http2) GetRoutes() []*HttpRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type ProxyProtocol_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProxyProtocol_Opaque) Reset() {
	*x = ProxyProtocol_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Opaque) ProtoMessage() {}

func (x *ProxyProtocol_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Opaque.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Opaque) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 3}
}

type ProxyProtocol_Tls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProxyProtocol_Tls) Reset() {
	*x = ProxyProtocol_Tls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Tls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Tls) ProtoMessage() {}

func (x *ProxyProtocol_Tls) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Tls.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Tls) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 4}
}

type HttpRoute_HttpRouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must have at least one rule.
	Rules []*HttpRoute_HttpRouteRule_Rule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *HttpRoute_HttpRouteRule) Reset() {
	*x = HttpRoute_HttpRouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute_HttpRouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_HttpRouteRule) ProtoMessage() {}

func (x *HttpRoute_HttpRouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_HttpRouteRule.ProtoReflect.Descriptor instead.
func (*HttpRoute_HttpRouteRule) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3, 0}
}

func (x *HttpRoute_HttpRouteRule) GetRules() []*HttpRoute_HttpRouteRule_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type HttpRoute_ServiceProfileRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The condition for matching this route.
	Condition *destination.RequestMatch `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// Metric labels to attach to requests and responses that match this route.
	// TODO(eliza): do we want the HTTPRoute configuration to also be able to
	// specify arbitrary metrics labels?
	MetricsLabels map[string]string `protobuf:"bytes,3,rep,name=metrics_labels,json=metricsLabels,proto3" json:"metrics_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpRoute_ServiceProfileRule) Reset() {
	*x = HttpRoute_ServiceProfileRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute_ServiceProfileRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_ServiceProfileRule) ProtoMessage() {}

func (x *HttpRoute_ServiceProfileRule) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_ServiceProfileRule.ProtoReflect.Descriptor instead.
func (*HttpRoute_ServiceProfileRule) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3, 1}
}

func (x *HttpRoute_ServiceProfileRule) GetCondition() *destination.RequestMatch {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *HttpRoute_ServiceProfileRule) GetMetricsLabels() map[string]string {
	if x != nil {
		return x.MetricsLabels
	}
	return nil
}

type HttpRoute_HttpRouteRule_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches  []*http_route.HttpRouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Backends []*Backend                   `protobuf:"bytes,3,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *HttpRoute_HttpRouteRule_Rule) Reset() {
	*x = HttpRoute_HttpRouteRule_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute_HttpRouteRule_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_HttpRouteRule_Rule) ProtoMessage() {}

func (x *HttpRoute_HttpRouteRule_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_HttpRouteRule_Rule.ProtoReflect.Descriptor instead.
func (*HttpRoute_HttpRouteRule_Rule) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *HttpRoute_HttpRouteRule_Rule) GetMatches() []*http_route.HttpRouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *HttpRoute_HttpRouteRule_Rule) GetBackends() []*Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

var File_outbound_proto protoreflect.FileDescriptor

var file_outbound_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xdd, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x64,
	0x67, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74,
	0x12, 0x3e, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73,
	0x22, 0xa5, 0x05, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x49, 0x0a,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x68, 0x74,
	0x74, 0x70, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x31, 0x48, 0x00, 0x52, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x31, 0x12, 0x46, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x32, 0x48, 0x00, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x1a, 0x84, 0x01, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x45, 0x0a, 0x05, 0x48, 0x74, 0x74, 0x70, 0x31, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x45, 0x0a, 0x05, 0x48, 0x74, 0x74, 0x70,
	0x32, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x08, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x05, 0x0a, 0x03, 0x54, 0x6c, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xfe, 0x07, 0x0a, 0x09, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xee, 0x01, 0x0a, 0x0d, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x93, 0x02, 0x0a, 0x12,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x0e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09,
	0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x32, 0xbe, 0x01, 0x0a, 0x10, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x22, 0x2e, 0x69,
	0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x2e, 0x69, 0x6f,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x1a, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x32, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_outbound_proto_rawDescOnce sync.Once
	file_outbound_proto_rawDescData = file_outbound_proto_rawDesc
)

func file_outbound_proto_rawDescGZIP() []byte {
	file_outbound_proto_rawDescOnce.Do(func() {
		file_outbound_proto_rawDescData = protoimpl.X.CompressGZIP(file_outbound_proto_rawDescData)
	})
	return file_outbound_proto_rawDescData
}

var file_outbound_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_outbound_proto_goTypes = []interface{}{
	(*TargetSpec)(nil),                   // 0: io.linkerd.proxy.outbound.TargetSpec
	(*Service)(nil),                      // 1: io.linkerd.proxy.outbound.Service
	(*ProxyProtocol)(nil),                // 2: io.linkerd.proxy.outbound.ProxyProtocol
	(*HttpRoute)(nil),                    // 3: io.linkerd.proxy.outbound.HttpRoute
	(*Backend)(nil),                      // 4: io.linkerd.proxy.outbound.Backend
	(*ProxyProtocol_Detect)(nil),         // 5: io.linkerd.proxy.outbound.ProxyProtocol.Detect
	(*ProxyProtocol_Http1)(nil),          // 6: io.linkerd.proxy.outbound.ProxyProtocol.Http1
	(*ProxyProtocol_Http2)(nil),          // 7: io.linkerd.proxy.outbound.ProxyProtocol.Http2
	(*ProxyProtocol_Opaque)(nil),         // 8: io.linkerd.proxy.outbound.ProxyProtocol.Opaque
	(*ProxyProtocol_Tls)(nil),            // 9: io.linkerd.proxy.outbound.ProxyProtocol.Tls
	(*HttpRoute_HttpRouteRule)(nil),      // 10: io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule
	(*HttpRoute_ServiceProfileRule)(nil), // 11: io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule
	(*HttpRoute_HttpRouteRule_Rule)(nil), // 12: io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule.Rule
	nil,                                  // 13: io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule.MetricsLabelsEntry
	(*net.IPAddress)(nil),                // 14: io.linkerd.proxy.net.IPAddress
	(*destination.RetryBudget)(nil),      // 15: io.linkerd.proxy.destination.RetryBudget
	(*meta.Metadata)(nil),                // 16: io.linkerd.proxy.meta.Metadata
	(*http_route.HostMatch)(nil),         // 17: io.linkerd.proxy.http_route.HostMatch
	(*destination.ResponseClass)(nil),    // 18: io.linkerd.proxy.destination.ResponseClass
	(*duration.Duration)(nil),            // 19: google.protobuf.Duration
	(*destination.WeightedDst)(nil),      // 20: io.linkerd.proxy.destination.WeightedDst
	(*destination.WeightedAddr)(nil),     // 21: io.linkerd.proxy.destination.WeightedAddr
	(*destination.RequestMatch)(nil),     // 22: io.linkerd.proxy.destination.RequestMatch
	(*http_route.HttpRouteMatch)(nil),    // 23: io.linkerd.proxy.http_route.HttpRouteMatch
}
var file_outbound_proto_depIdxs = []int32{
	14, // 0: io.linkerd.proxy.outbound.TargetSpec.address:type_name -> io.linkerd.proxy.net.IPAddress
	2,  // 1: io.linkerd.proxy.outbound.Service.protocol:type_name -> io.linkerd.proxy.outbound.ProxyProtocol
	15, // 2: io.linkerd.proxy.outbound.Service.retry_budget:type_name -> io.linkerd.proxy.destination.RetryBudget
	4,  // 3: io.linkerd.proxy.outbound.Service.backends:type_name -> io.linkerd.proxy.outbound.Backend
	5,  // 4: io.linkerd.proxy.outbound.ProxyProtocol.detect:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Detect
	8,  // 5: io.linkerd.proxy.outbound.ProxyProtocol.opaque:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Opaque
	9,  // 6: io.linkerd.proxy.outbound.ProxyProtocol.tls:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Tls
	6,  // 7: io.linkerd.proxy.outbound.ProxyProtocol.http1:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Http1
	7,  // 8: io.linkerd.proxy.outbound.ProxyProtocol.http2:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Http2
	16, // 9: io.linkerd.proxy.outbound.HttpRoute.metadata:type_name -> io.linkerd.proxy.meta.Metadata
	17, // 10: io.linkerd.proxy.outbound.HttpRoute.hosts:type_name -> io.linkerd.proxy.http_route.HostMatch
	10, // 11: io.linkerd.proxy.outbound.HttpRoute.http_route:type_name -> io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule
	11, // 12: io.linkerd.proxy.outbound.HttpRoute.service_profile:type_name -> io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule
	18, // 13: io.linkerd.proxy.outbound.HttpRoute.response_classes:type_name -> io.linkerd.proxy.destination.ResponseClass
	19, // 14: io.linkerd.proxy.outbound.HttpRoute.timeout:type_name -> google.protobuf.Duration
	20, // 15: io.linkerd.proxy.outbound.Backend.dst:type_name -> io.linkerd.proxy.destination.WeightedDst
	21, // 16: io.linkerd.proxy.outbound.Backend.endpoint:type_name -> io.linkerd.proxy.destination.WeightedAddr
	19, // 17: io.linkerd.proxy.outbound.ProxyProtocol.Detect.timeout:type_name -> google.protobuf.Duration
	3,  // 18: io.linkerd.proxy.outbound.ProxyProtocol.Detect.http_routes:type_name -> io.linkerd.proxy.outbound.HttpRoute
	3,  // 19: io.linkerd.proxy.outbound.ProxyProtocol.Http1.routes:type_name -> io.linkerd.proxy.outbound.HttpRoute
	3,  // 20: io.linkerd.proxy.outbound.ProxyProtocol.Http2.routes:type_name -> io.linkerd.proxy.outbound.HttpRoute
	12, // 21: io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule.rules:type_name -> io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule.Rule
	22, // 22: io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule.condition:type_name -> io.linkerd.proxy.destination.RequestMatch
	13, // 23: io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule.metrics_labels:type_name -> io.linkerd.proxy.outbound.HttpRoute.ServiceProfileRule.MetricsLabelsEntry
	23, // 24: io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule.Rule.matches:type_name -> io.linkerd.proxy.http_route.HttpRouteMatch
	4,  // 25: io.linkerd.proxy.outbound.HttpRoute.HttpRouteRule.Rule.backends:type_name -> io.linkerd.proxy.outbound.Backend
	0,  // 26: io.linkerd.proxy.outbound.OutboundPolicies.Get:input_type -> io.linkerd.proxy.outbound.TargetSpec
	0,  // 27: io.linkerd.proxy.outbound.OutboundPolicies.Watch:input_type -> io.linkerd.proxy.outbound.TargetSpec
	1,  // 28: io.linkerd.proxy.outbound.OutboundPolicies.Get:output_type -> io.linkerd.proxy.outbound.Service
	1,  // 29: io.linkerd.proxy.outbound.OutboundPolicies.Watch:output_type -> io.linkerd.proxy.outbound.Service
	28, // [28:30] is the sub-list for method output_type
	26, // [26:28] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_outbound_proto_init() }
func file_outbound_proto_init() {
	if File_outbound_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_outbound_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Detect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Http1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Http2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Tls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute_HttpRouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute_ServiceProfileRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute_HttpRouteRule_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_outbound_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProxyProtocol_Detect_)(nil),
		(*ProxyProtocol_Opaque_)(nil),
		(*ProxyProtocol_Tls_)(nil),
		(*ProxyProtocol_Http1_)(nil),
		(*ProxyProtocol_Http2_)(nil),
	}
	file_outbound_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*HttpRoute_HttpRoute)(nil),
		(*HttpRoute_ServiceProfile)(nil),
	}
	file_outbound_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Backend_Dst)(nil),
		(*Backend_Endpoint)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_outbound_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_outbound_proto_goTypes,
		DependencyIndexes: file_outbound_proto_depIdxs,
		MessageInfos:      file_outbound_proto_msgTypes,
	}.Build()
	File_outbound_proto = out.File
	file_outbound_proto_rawDesc = nil
	file_outbound_proto_goTypes = nil
	file_outbound_proto_depIdxs = nil
}
