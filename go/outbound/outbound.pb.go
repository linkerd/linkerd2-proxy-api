// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: outbound.proto

package outbound

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	destination "github.com/linkerd/linkerd2-proxy-api/go/destination"
	http_route "github.com/linkerd/linkerd2-proxy-api/go/http_route"
	meta "github.com/linkerd/linkerd2-proxy-api/go/meta"
	net "github.com/linkerd/linkerd2-proxy-api/go/net"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the source proxy workload (e.g., pod name).
	Workload string `protobuf:"bytes,1,opt,name=workload,proto3" json:"workload,omitempty"`
	// Types that are assignable to Target:
	//	*TargetSpec_Address
	//	*TargetSpec_Authority
	Target isTargetSpec_Target `protobuf_oneof:"target"`
	// Target port
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *TargetSpec) Reset() {
	*x = TargetSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSpec) ProtoMessage() {}

func (x *TargetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSpec.ProtoReflect.Descriptor instead.
func (*TargetSpec) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{0}
}

func (x *TargetSpec) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

func (m *TargetSpec) GetTarget() isTargetSpec_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *TargetSpec) GetAddress() *net.IPAddress {
	if x, ok := x.GetTarget().(*TargetSpec_Address); ok {
		return x.Address
	}
	return nil
}

func (x *TargetSpec) GetAuthority() string {
	if x, ok := x.GetTarget().(*TargetSpec_Authority); ok {
		return x.Authority
	}
	return ""
}

func (x *TargetSpec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type isTargetSpec_Target interface {
	isTargetSpec_Target()
}

type TargetSpec_Address struct {
	// Target address. This may be the cluster IP of a Kubernetes Service or the
	// IP of a Pod.
	Address *net.IPAddress `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type TargetSpec_Authority struct {
	Authority string `protobuf:"bytes,3,opt,name=authority,proto3,oneof"`
}

func (*TargetSpec_Address) isTargetSpec_Target() {}

func (*TargetSpec_Authority) isTargetSpec_Target() {}

// Outbound policy for a given target address.
type OutboundPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the protocol to use for this target.  This will be set to Opaque
	// if the target has been marked as opaque and will be Discover otherwise.
	Protocol *ProxyProtocol `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The backend to use for this target.  If the target is a Service, the
	// backend will be a Dst containing the FQDN of the Service.  If the target
	// is a Pod, it will be an endpoint address.
	Backend *Backend `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
}

func (x *OutboundPolicy) Reset() {
	*x = OutboundPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundPolicy) ProtoMessage() {}

func (x *OutboundPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundPolicy.ProtoReflect.Descriptor instead.
func (*OutboundPolicy) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{1}
}

func (x *OutboundPolicy) GetProtocol() *ProxyProtocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *OutboundPolicy) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

type ProxyProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*ProxyProtocol_Detect_
	//	*ProxyProtocol_Opaque_
	Kind isProxyProtocol_Kind `protobuf_oneof:"kind"`
}

func (x *ProxyProtocol) Reset() {
	*x = ProxyProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol) ProtoMessage() {}

func (x *ProxyProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol.ProtoReflect.Descriptor instead.
func (*ProxyProtocol) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2}
}

func (m *ProxyProtocol) GetKind() isProxyProtocol_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *ProxyProtocol) GetDetect() *ProxyProtocol_Detect {
	if x, ok := x.GetKind().(*ProxyProtocol_Detect_); ok {
		return x.Detect
	}
	return nil
}

func (x *ProxyProtocol) GetOpaque() *ProxyProtocol_Opaque {
	if x, ok := x.GetKind().(*ProxyProtocol_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isProxyProtocol_Kind interface {
	isProxyProtocol_Kind()
}

type ProxyProtocol_Detect_ struct {
	Detect *ProxyProtocol_Detect `protobuf:"bytes,1,opt,name=detect,proto3,oneof"`
}

type ProxyProtocol_Opaque_ struct {
	Opaque *ProxyProtocol_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*ProxyProtocol_Detect_) isProxyProtocol_Kind() {}

func (*ProxyProtocol_Opaque_) isProxyProtocol_Kind() {}

// Outbound-specific HTTP route configuration (based on the [Gateway API][api]).
//
// [api]: https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRoute
type HttpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *meta.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If empty, the host value is ignored.
	Hosts []*http_route.HostMatch `protobuf:"bytes,2,rep,name=hosts,proto3" json:"hosts,omitempty"`
	// Must have at least one rule.
	Rules []*HttpRoute_Rule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *HttpRoute) Reset() {
	*x = HttpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute) ProtoMessage() {}

func (x *HttpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute.ProtoReflect.Descriptor instead.
func (*HttpRoute) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3}
}

func (x *HttpRoute) GetMetadata() *meta.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HttpRoute) GetHosts() []*http_route.HostMatch {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *HttpRoute) GetRules() []*HttpRoute_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*Filter_FailureInjector
	Kind isFilter_Kind `protobuf_oneof:"kind"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{4}
}

func (m *Filter) GetKind() isFilter_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Filter) GetFailureInjector() *http_route.HttpFailureInjector {
	if x, ok := x.GetKind().(*Filter_FailureInjector); ok {
		return x.FailureInjector
	}
	return nil
}

type isFilter_Kind interface {
	isFilter_Kind()
}

type Filter_FailureInjector struct {
	FailureInjector *http_route.HttpFailureInjector `protobuf:"bytes,1,opt,name=failure_injector,json=failureInjector,proto3,oneof"`
}

func (*Filter_FailureInjector) isFilter_Kind() {}

type Distribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Distribution:
	//	*Distribution_Empty_
	//	*Distribution_FirstAvailable_
	//	*Distribution_RandomAvailable_
	Distribution isDistribution_Distribution `protobuf_oneof:"distribution"`
}

func (x *Distribution) Reset() {
	*x = Distribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution) ProtoMessage() {}

func (x *Distribution) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution.ProtoReflect.Descriptor instead.
func (*Distribution) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{5}
}

func (m *Distribution) GetDistribution() isDistribution_Distribution {
	if m != nil {
		return m.Distribution
	}
	return nil
}

func (x *Distribution) GetEmpty() *Distribution_Empty {
	if x, ok := x.GetDistribution().(*Distribution_Empty_); ok {
		return x.Empty
	}
	return nil
}

func (x *Distribution) GetFirstAvailable() *Distribution_FirstAvailable {
	if x, ok := x.GetDistribution().(*Distribution_FirstAvailable_); ok {
		return x.FirstAvailable
	}
	return nil
}

func (x *Distribution) GetRandomAvailable() *Distribution_RandomAvailable {
	if x, ok := x.GetDistribution().(*Distribution_RandomAvailable_); ok {
		return x.RandomAvailable
	}
	return nil
}

type isDistribution_Distribution interface {
	isDistribution_Distribution()
}

type Distribution_Empty_ struct {
	Empty *Distribution_Empty `protobuf:"bytes,1,opt,name=empty,proto3,oneof"`
}

type Distribution_FirstAvailable_ struct {
	FirstAvailable *Distribution_FirstAvailable `protobuf:"bytes,2,opt,name=first_available,json=firstAvailable,proto3,oneof"`
}

type Distribution_RandomAvailable_ struct {
	RandomAvailable *Distribution_RandomAvailable `protobuf:"bytes,3,opt,name=random_available,json=randomAvailable,proto3,oneof"`
}

func (*Distribution_Empty_) isDistribution_Distribution() {}

func (*Distribution_FirstAvailable_) isDistribution_Distribution() {}

func (*Distribution_RandomAvailable_) isDistribution_Distribution() {}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filters []*Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Types that are assignable to Backend:
	//	*Backend_Balancer
	//	*Backend_Forward
	Backend isBackend_Backend `protobuf_oneof:"backend"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{6}
}

func (x *Backend) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (m *Backend) GetBackend() isBackend_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *Backend) GetBalancer() *destination.WeightedDst {
	if x, ok := x.GetBackend().(*Backend_Balancer); ok {
		return x.Balancer
	}
	return nil
}

func (x *Backend) GetForward() *destination.WeightedAddr {
	if x, ok := x.GetBackend().(*Backend_Forward); ok {
		return x.Forward
	}
	return nil
}

type isBackend_Backend interface {
	isBackend_Backend()
}

type Backend_Balancer struct {
	Balancer *destination.WeightedDst `protobuf:"bytes,2,opt,name=balancer,proto3,oneof"`
}

type Backend_Forward struct {
	Forward *destination.WeightedAddr `protobuf:"bytes,3,opt,name=forward,proto3,oneof"`
}

func (*Backend_Balancer) isBackend_Backend() {}

func (*Backend_Forward) isBackend_Backend() {}

type ProxyProtocol_Detect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protocol detection timeout.
	Timeout *duration.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Policy to use if the protocol is detected as HTTP1.
	Http1 *ProxyProtocol_Http1 `protobuf:"bytes,2,opt,name=http1,proto3" json:"http1,omitempty"`
	// Policy to use if the protocol is detected as HTTP2.
	Http2 *ProxyProtocol_Http2 `protobuf:"bytes,3,opt,name=http2,proto3" json:"http2,omitempty"`
}

func (x *ProxyProtocol_Detect) Reset() {
	*x = ProxyProtocol_Detect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Detect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Detect) ProtoMessage() {}

func (x *ProxyProtocol_Detect) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Detect.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Detect) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ProxyProtocol_Detect) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *ProxyProtocol_Detect) GetHttp1() *ProxyProtocol_Http1 {
	if x != nil {
		return x.Http1
	}
	return nil
}

func (x *ProxyProtocol_Detect) GetHttp2() *ProxyProtocol_Http2 {
	if x != nil {
		return x.Http2
	}
	return nil
}

type ProxyProtocol_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProxyProtocol_Opaque) Reset() {
	*x = ProxyProtocol_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Opaque) ProtoMessage() {}

func (x *ProxyProtocol_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Opaque.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Opaque) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 1}
}

type ProxyProtocol_Http1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpRoutes []*HttpRoute `protobuf:"bytes,1,rep,name=http_routes,json=httpRoutes,proto3" json:"http_routes,omitempty"`
}

func (x *ProxyProtocol_Http1) Reset() {
	*x = ProxyProtocol_Http1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Http1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Http1) ProtoMessage() {}

func (x *ProxyProtocol_Http1) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Http1.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Http1) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ProxyProtocol_Http1) GetHttpRoutes() []*HttpRoute {
	if x != nil {
		return x.HttpRoutes
	}
	return nil
}

type ProxyProtocol_Http2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HttpRoutes []*HttpRoute `protobuf:"bytes,1,rep,name=http_routes,json=httpRoutes,proto3" json:"http_routes,omitempty"`
}

func (x *ProxyProtocol_Http2) Reset() {
	*x = ProxyProtocol_Http2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyProtocol_Http2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyProtocol_Http2) ProtoMessage() {}

func (x *ProxyProtocol_Http2) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyProtocol_Http2.ProtoReflect.Descriptor instead.
func (*ProxyProtocol_Http2) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ProxyProtocol_Http2) GetHttpRoutes() []*HttpRoute {
	if x != nil {
		return x.HttpRoutes
	}
	return nil
}

type HttpRoute_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches  []*http_route.HttpRouteMatch `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Filters  []*Filter                    `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	Backends []*Distribution              `protobuf:"bytes,3,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *HttpRoute_Rule) Reset() {
	*x = HttpRoute_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRoute_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRoute_Rule) ProtoMessage() {}

func (x *HttpRoute_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRoute_Rule.ProtoReflect.Descriptor instead.
func (*HttpRoute_Rule) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{3, 0}
}

func (x *HttpRoute_Rule) GetMatches() []*http_route.HttpRouteMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *HttpRoute_Rule) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *HttpRoute_Rule) GetBackends() []*Distribution {
	if x != nil {
		return x.Backends
	}
	return nil
}

type Distribution_Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Distribution_Empty) Reset() {
	*x = Distribution_Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution_Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution_Empty) ProtoMessage() {}

func (x *Distribution_Empty) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution_Empty.ProtoReflect.Descriptor instead.
func (*Distribution_Empty) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{5, 0}
}

type Distribution_FirstAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backends []*Backend `protobuf:"bytes,1,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *Distribution_FirstAvailable) Reset() {
	*x = Distribution_FirstAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution_FirstAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution_FirstAvailable) ProtoMessage() {}

func (x *Distribution_FirstAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution_FirstAvailable.ProtoReflect.Descriptor instead.
func (*Distribution_FirstAvailable) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Distribution_FirstAvailable) GetBackends() []*Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

type Distribution_RandomAvailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backends []*Backend `protobuf:"bytes,1,rep,name=backends,proto3" json:"backends,omitempty"`
}

func (x *Distribution_RandomAvailable) Reset() {
	*x = Distribution_RandomAvailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_outbound_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distribution_RandomAvailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distribution_RandomAvailable) ProtoMessage() {}

func (x *Distribution_RandomAvailable) ProtoReflect() protoreflect.Message {
	mi := &file_outbound_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distribution_RandomAvailable.ProtoReflect.Descriptor instead.
func (*Distribution_RandomAvailable) Descriptor() ([]byte, []int) {
	return file_outbound_proto_rawDescGZIP(), []int{5, 2}
}

func (x *Distribution_RandomAvailable) GetBackends() []*Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

var File_outbound_proto protoreflect.FileDescriptor

var file_outbound_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x09, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x94, 0x01,
	0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x22, 0xa3, 0x04, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x49, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x12, 0x49, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0xc9, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x44, 0x0a, 0x05,
	0x68, 0x74, 0x74, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x31, 0x52, 0x05, 0x68, 0x74, 0x74,
	0x70, 0x31, 0x12, 0x44, 0x0a, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x32, 0x52, 0x05, 0x68, 0x74, 0x74, 0x70, 0x32, 0x1a, 0x08, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x1a, 0x4e, 0x0a, 0x05, 0x48, 0x74, 0x74, 0x70, 0x31, 0x12, 0x45, 0x0a, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x05, 0x48, 0x74, 0x74, 0x70, 0x32, 0x12, 0x45, 0x0a, 0x0b, 0x68,
	0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x99, 0x03, 0x0a, 0x09, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6f, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0xcf, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x43, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x5d, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xdc, 0x03, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x61, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x64, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x50, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x73, 0x1a, 0x51, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x47, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x44, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x48, 0x00, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x32, 0xcc, 0x01, 0x0a, 0x10,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x59, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x29,
	0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x05, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x29, 0x2e, 0x69, 0x6f,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x32, 0x2d, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2d,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_outbound_proto_rawDescOnce sync.Once
	file_outbound_proto_rawDescData = file_outbound_proto_rawDesc
)

func file_outbound_proto_rawDescGZIP() []byte {
	file_outbound_proto_rawDescOnce.Do(func() {
		file_outbound_proto_rawDescData = protoimpl.X.CompressGZIP(file_outbound_proto_rawDescData)
	})
	return file_outbound_proto_rawDescData
}

var file_outbound_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_outbound_proto_goTypes = []interface{}{
	(*TargetSpec)(nil),                     // 0: io.linkerd.proxy.outbound.TargetSpec
	(*OutboundPolicy)(nil),                 // 1: io.linkerd.proxy.outbound.OutboundPolicy
	(*ProxyProtocol)(nil),                  // 2: io.linkerd.proxy.outbound.ProxyProtocol
	(*HttpRoute)(nil),                      // 3: io.linkerd.proxy.outbound.HttpRoute
	(*Filter)(nil),                         // 4: io.linkerd.proxy.outbound.Filter
	(*Distribution)(nil),                   // 5: io.linkerd.proxy.outbound.Distribution
	(*Backend)(nil),                        // 6: io.linkerd.proxy.outbound.Backend
	(*ProxyProtocol_Detect)(nil),           // 7: io.linkerd.proxy.outbound.ProxyProtocol.Detect
	(*ProxyProtocol_Opaque)(nil),           // 8: io.linkerd.proxy.outbound.ProxyProtocol.Opaque
	(*ProxyProtocol_Http1)(nil),            // 9: io.linkerd.proxy.outbound.ProxyProtocol.Http1
	(*ProxyProtocol_Http2)(nil),            // 10: io.linkerd.proxy.outbound.ProxyProtocol.Http2
	(*HttpRoute_Rule)(nil),                 // 11: io.linkerd.proxy.outbound.HttpRoute.Rule
	(*Distribution_Empty)(nil),             // 12: io.linkerd.proxy.outbound.Distribution.Empty
	(*Distribution_FirstAvailable)(nil),    // 13: io.linkerd.proxy.outbound.Distribution.FirstAvailable
	(*Distribution_RandomAvailable)(nil),   // 14: io.linkerd.proxy.outbound.Distribution.RandomAvailable
	(*net.IPAddress)(nil),                  // 15: io.linkerd.proxy.net.IPAddress
	(*meta.Metadata)(nil),                  // 16: io.linkerd.proxy.meta.Metadata
	(*http_route.HostMatch)(nil),           // 17: io.linkerd.proxy.http_route.HostMatch
	(*http_route.HttpFailureInjector)(nil), // 18: io.linkerd.proxy.http_route.HttpFailureInjector
	(*destination.WeightedDst)(nil),        // 19: io.linkerd.proxy.destination.WeightedDst
	(*destination.WeightedAddr)(nil),       // 20: io.linkerd.proxy.destination.WeightedAddr
	(*duration.Duration)(nil),              // 21: google.protobuf.Duration
	(*http_route.HttpRouteMatch)(nil),      // 22: io.linkerd.proxy.http_route.HttpRouteMatch
}
var file_outbound_proto_depIdxs = []int32{
	15, // 0: io.linkerd.proxy.outbound.TargetSpec.address:type_name -> io.linkerd.proxy.net.IPAddress
	2,  // 1: io.linkerd.proxy.outbound.OutboundPolicy.protocol:type_name -> io.linkerd.proxy.outbound.ProxyProtocol
	6,  // 2: io.linkerd.proxy.outbound.OutboundPolicy.backend:type_name -> io.linkerd.proxy.outbound.Backend
	7,  // 3: io.linkerd.proxy.outbound.ProxyProtocol.detect:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Detect
	8,  // 4: io.linkerd.proxy.outbound.ProxyProtocol.opaque:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Opaque
	16, // 5: io.linkerd.proxy.outbound.HttpRoute.metadata:type_name -> io.linkerd.proxy.meta.Metadata
	17, // 6: io.linkerd.proxy.outbound.HttpRoute.hosts:type_name -> io.linkerd.proxy.http_route.HostMatch
	11, // 7: io.linkerd.proxy.outbound.HttpRoute.rules:type_name -> io.linkerd.proxy.outbound.HttpRoute.Rule
	18, // 8: io.linkerd.proxy.outbound.Filter.failure_injector:type_name -> io.linkerd.proxy.http_route.HttpFailureInjector
	12, // 9: io.linkerd.proxy.outbound.Distribution.empty:type_name -> io.linkerd.proxy.outbound.Distribution.Empty
	13, // 10: io.linkerd.proxy.outbound.Distribution.first_available:type_name -> io.linkerd.proxy.outbound.Distribution.FirstAvailable
	14, // 11: io.linkerd.proxy.outbound.Distribution.random_available:type_name -> io.linkerd.proxy.outbound.Distribution.RandomAvailable
	4,  // 12: io.linkerd.proxy.outbound.Backend.filters:type_name -> io.linkerd.proxy.outbound.Filter
	19, // 13: io.linkerd.proxy.outbound.Backend.balancer:type_name -> io.linkerd.proxy.destination.WeightedDst
	20, // 14: io.linkerd.proxy.outbound.Backend.forward:type_name -> io.linkerd.proxy.destination.WeightedAddr
	21, // 15: io.linkerd.proxy.outbound.ProxyProtocol.Detect.timeout:type_name -> google.protobuf.Duration
	9,  // 16: io.linkerd.proxy.outbound.ProxyProtocol.Detect.http1:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Http1
	10, // 17: io.linkerd.proxy.outbound.ProxyProtocol.Detect.http2:type_name -> io.linkerd.proxy.outbound.ProxyProtocol.Http2
	3,  // 18: io.linkerd.proxy.outbound.ProxyProtocol.Http1.http_routes:type_name -> io.linkerd.proxy.outbound.HttpRoute
	3,  // 19: io.linkerd.proxy.outbound.ProxyProtocol.Http2.http_routes:type_name -> io.linkerd.proxy.outbound.HttpRoute
	22, // 20: io.linkerd.proxy.outbound.HttpRoute.Rule.matches:type_name -> io.linkerd.proxy.http_route.HttpRouteMatch
	4,  // 21: io.linkerd.proxy.outbound.HttpRoute.Rule.filters:type_name -> io.linkerd.proxy.outbound.Filter
	5,  // 22: io.linkerd.proxy.outbound.HttpRoute.Rule.backends:type_name -> io.linkerd.proxy.outbound.Distribution
	6,  // 23: io.linkerd.proxy.outbound.Distribution.FirstAvailable.backends:type_name -> io.linkerd.proxy.outbound.Backend
	6,  // 24: io.linkerd.proxy.outbound.Distribution.RandomAvailable.backends:type_name -> io.linkerd.proxy.outbound.Backend
	0,  // 25: io.linkerd.proxy.outbound.OutboundPolicies.Get:input_type -> io.linkerd.proxy.outbound.TargetSpec
	0,  // 26: io.linkerd.proxy.outbound.OutboundPolicies.Watch:input_type -> io.linkerd.proxy.outbound.TargetSpec
	1,  // 27: io.linkerd.proxy.outbound.OutboundPolicies.Get:output_type -> io.linkerd.proxy.outbound.OutboundPolicy
	1,  // 28: io.linkerd.proxy.outbound.OutboundPolicies.Watch:output_type -> io.linkerd.proxy.outbound.OutboundPolicy
	27, // [27:29] is the sub-list for method output_type
	25, // [25:27] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_outbound_proto_init() }
func file_outbound_proto_init() {
	if File_outbound_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_outbound_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Detect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Http1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyProtocol_Http2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRoute_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_FirstAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_outbound_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distribution_RandomAvailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_outbound_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TargetSpec_Address)(nil),
		(*TargetSpec_Authority)(nil),
	}
	file_outbound_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ProxyProtocol_Detect_)(nil),
		(*ProxyProtocol_Opaque_)(nil),
	}
	file_outbound_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Filter_FailureInjector)(nil),
	}
	file_outbound_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Distribution_Empty_)(nil),
		(*Distribution_FirstAvailable_)(nil),
		(*Distribution_RandomAvailable_)(nil),
	}
	file_outbound_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Backend_Balancer)(nil),
		(*Backend_Forward)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_outbound_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_outbound_proto_goTypes,
		DependencyIndexes: file_outbound_proto_depIdxs,
		MessageInfos:      file_outbound_proto_msgTypes,
	}.Build()
	File_outbound_proto = out.File
	file_outbound_proto_rawDesc = nil
	file_outbound_proto_goTypes = nil
	file_outbound_proto_depIdxs = nil
}
