// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: autoregistration.proto

package expansion

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Autoregistration_Register_FullMethodName = "/io.linkerd.proxy.expansion.Autoregistration/Register"
)

// AutoregistrationClient is the client API for Autoregistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AutoregistrationClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type autoregistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewAutoregistrationClient(cc grpc.ClientConnInterface) AutoregistrationClient {
	return &autoregistrationClient{cc}
}

func (c *autoregistrationClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Autoregistration_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AutoregistrationServer is the server API for Autoregistration service.
// All implementations must embed UnimplementedAutoregistrationServer
// for forward compatibility
type AutoregistrationServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedAutoregistrationServer()
}

// UnimplementedAutoregistrationServer must be embedded to have forward compatible implementations.
type UnimplementedAutoregistrationServer struct {
}

func (UnimplementedAutoregistrationServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAutoregistrationServer) mustEmbedUnimplementedAutoregistrationServer() {}

// UnsafeAutoregistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AutoregistrationServer will
// result in compilation errors.
type UnsafeAutoregistrationServer interface {
	mustEmbedUnimplementedAutoregistrationServer()
}

func RegisterAutoregistrationServer(s grpc.ServiceRegistrar, srv AutoregistrationServer) {
	s.RegisterService(&Autoregistration_ServiceDesc, srv)
}

func _Autoregistration_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AutoregistrationServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Autoregistration_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AutoregistrationServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Autoregistration_ServiceDesc is the grpc.ServiceDesc for Autoregistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Autoregistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.expansion.Autoregistration",
	HandlerType: (*AutoregistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Autoregistration_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "autoregistration.proto",
}
