// Code generated by protoc-gen-go. DO NOT EDIT.
// source: destination.proto

/*
Package destination is a generated protocol buffer package.

It is generated from these files:
	destination.proto

It has these top-level messages:
	GetDestination
	Update
	AddrSet
	WeightedAddrSet
	WeightedAddr
	TlsIdentity
	NoEndpoints
	ProtocolHint
	DestinationProfile
	Route
	ResponseClass
	RequestMatch
	PathMatch
	ResponseMatch
	HttpStatusRange
*/
package destination

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import io_linkerd_proxy_http_types "github.com/linkerd/linkerd2-proxy-api/go/http_types"
import io_linkerd_proxy_net "github.com/linkerd/linkerd2-proxy-api/go/net"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDestination struct {
	Scheme string `protobuf:"bytes,1,opt,name=scheme" json:"scheme,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (m *GetDestination) Reset()                    { *m = GetDestination{} }
func (m *GetDestination) String() string            { return proto.CompactTextString(m) }
func (*GetDestination) ProtoMessage()               {}
func (*GetDestination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetDestination) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *GetDestination) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Update struct {
	// Types that are valid to be assigned to Update:
	//	*Update_Add
	//	*Update_Remove
	//	*Update_NoEndpoints
	Update isUpdate_Update `protobuf_oneof:"update"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isUpdate_Update interface{ isUpdate_Update() }

type Update_Add struct {
	Add *WeightedAddrSet `protobuf:"bytes,1,opt,name=add,oneof"`
}
type Update_Remove struct {
	Remove *AddrSet `protobuf:"bytes,2,opt,name=remove,oneof"`
}
type Update_NoEndpoints struct {
	NoEndpoints *NoEndpoints `protobuf:"bytes,3,opt,name=no_endpoints,json=noEndpoints,oneof"`
}

func (*Update_Add) isUpdate_Update()         {}
func (*Update_Remove) isUpdate_Update()      {}
func (*Update_NoEndpoints) isUpdate_Update() {}

func (m *Update) GetUpdate() isUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (m *Update) GetAdd() *WeightedAddrSet {
	if x, ok := m.GetUpdate().(*Update_Add); ok {
		return x.Add
	}
	return nil
}

func (m *Update) GetRemove() *AddrSet {
	if x, ok := m.GetUpdate().(*Update_Remove); ok {
		return x.Remove
	}
	return nil
}

func (m *Update) GetNoEndpoints() *NoEndpoints {
	if x, ok := m.GetUpdate().(*Update_NoEndpoints); ok {
		return x.NoEndpoints
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Update) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Update_OneofMarshaler, _Update_OneofUnmarshaler, _Update_OneofSizer, []interface{}{
		(*Update_Add)(nil),
		(*Update_Remove)(nil),
		(*Update_NoEndpoints)(nil),
	}
}

func _Update_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Update)
	// update
	switch x := m.Update.(type) {
	case *Update_Add:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Add); err != nil {
			return err
		}
	case *Update_Remove:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Remove); err != nil {
			return err
		}
	case *Update_NoEndpoints:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NoEndpoints); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Update.Update has unexpected type %T", x)
	}
	return nil
}

func _Update_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Update)
	switch tag {
	case 1: // update.add
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WeightedAddrSet)
		err := b.DecodeMessage(msg)
		m.Update = &Update_Add{msg}
		return true, err
	case 2: // update.remove
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddrSet)
		err := b.DecodeMessage(msg)
		m.Update = &Update_Remove{msg}
		return true, err
	case 3: // update.no_endpoints
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NoEndpoints)
		err := b.DecodeMessage(msg)
		m.Update = &Update_NoEndpoints{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Update_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Update)
	// update
	switch x := m.Update.(type) {
	case *Update_Add:
		s := proto.Size(x.Add)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_Remove:
		s := proto.Size(x.Remove)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Update_NoEndpoints:
		s := proto.Size(x.NoEndpoints)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddrSet struct {
	Addrs []*io_linkerd_proxy_net.TcpAddress `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *AddrSet) Reset()                    { *m = AddrSet{} }
func (m *AddrSet) String() string            { return proto.CompactTextString(m) }
func (*AddrSet) ProtoMessage()               {}
func (*AddrSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddrSet) GetAddrs() []*io_linkerd_proxy_net.TcpAddress {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type WeightedAddrSet struct {
	Addrs        []*WeightedAddr   `protobuf:"bytes,1,rep,name=addrs" json:"addrs,omitempty"`
	MetricLabels map[string]string `protobuf:"bytes,2,rep,name=metric_labels,json=metricLabels" json:"metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WeightedAddrSet) Reset()                    { *m = WeightedAddrSet{} }
func (m *WeightedAddrSet) String() string            { return proto.CompactTextString(m) }
func (*WeightedAddrSet) ProtoMessage()               {}
func (*WeightedAddrSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WeightedAddrSet) GetAddrs() []*WeightedAddr {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *WeightedAddrSet) GetMetricLabels() map[string]string {
	if m != nil {
		return m.MetricLabels
	}
	return nil
}

type WeightedAddr struct {
	Addr         *io_linkerd_proxy_net.TcpAddress `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Weight       uint32                           `protobuf:"varint,3,opt,name=weight" json:"weight,omitempty"`
	MetricLabels map[string]string                `protobuf:"bytes,4,rep,name=metric_labels,json=metricLabels" json:"metric_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TlsIdentity  *TlsIdentity                     `protobuf:"bytes,5,opt,name=tls_identity,json=tlsIdentity" json:"tls_identity,omitempty"`
	ProtocolHint *ProtocolHint                    `protobuf:"bytes,6,opt,name=protocol_hint,json=protocolHint" json:"protocol_hint,omitempty"`
}

func (m *WeightedAddr) Reset()                    { *m = WeightedAddr{} }
func (m *WeightedAddr) String() string            { return proto.CompactTextString(m) }
func (*WeightedAddr) ProtoMessage()               {}
func (*WeightedAddr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WeightedAddr) GetAddr() *io_linkerd_proxy_net.TcpAddress {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *WeightedAddr) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *WeightedAddr) GetMetricLabels() map[string]string {
	if m != nil {
		return m.MetricLabels
	}
	return nil
}

func (m *WeightedAddr) GetTlsIdentity() *TlsIdentity {
	if m != nil {
		return m.TlsIdentity
	}
	return nil
}

func (m *WeightedAddr) GetProtocolHint() *ProtocolHint {
	if m != nil {
		return m.ProtocolHint
	}
	return nil
}

// Which strategy should be used for verifying TLS.
type TlsIdentity struct {
	// Types that are valid to be assigned to Strategy:
	//	*TlsIdentity_K8SPodIdentity_
	Strategy isTlsIdentity_Strategy `protobuf_oneof:"strategy"`
}

func (m *TlsIdentity) Reset()                    { *m = TlsIdentity{} }
func (m *TlsIdentity) String() string            { return proto.CompactTextString(m) }
func (*TlsIdentity) ProtoMessage()               {}
func (*TlsIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isTlsIdentity_Strategy interface{ isTlsIdentity_Strategy() }

type TlsIdentity_K8SPodIdentity_ struct {
	K8SPodIdentity *TlsIdentity_K8SPodIdentity `protobuf:"bytes,2,opt,name=k8s_pod_identity,json=k8sPodIdentity,oneof"`
}

func (*TlsIdentity_K8SPodIdentity_) isTlsIdentity_Strategy() {}

func (m *TlsIdentity) GetStrategy() isTlsIdentity_Strategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

func (m *TlsIdentity) GetK8SPodIdentity() *TlsIdentity_K8SPodIdentity {
	if x, ok := m.GetStrategy().(*TlsIdentity_K8SPodIdentity_); ok {
		return x.K8SPodIdentity
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TlsIdentity) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TlsIdentity_OneofMarshaler, _TlsIdentity_OneofUnmarshaler, _TlsIdentity_OneofSizer, []interface{}{
		(*TlsIdentity_K8SPodIdentity_)(nil),
	}
}

func _TlsIdentity_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TlsIdentity)
	// strategy
	switch x := m.Strategy.(type) {
	case *TlsIdentity_K8SPodIdentity_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.K8SPodIdentity); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TlsIdentity.Strategy has unexpected type %T", x)
	}
	return nil
}

func _TlsIdentity_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TlsIdentity)
	switch tag {
	case 2: // strategy.k8s_pod_identity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TlsIdentity_K8SPodIdentity)
		err := b.DecodeMessage(msg)
		m.Strategy = &TlsIdentity_K8SPodIdentity_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TlsIdentity_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TlsIdentity)
	// strategy
	switch x := m.Strategy.(type) {
	case *TlsIdentity_K8SPodIdentity_:
		s := proto.Size(x.K8SPodIdentity)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Verify the certificate based on the Kubernetes pod identity.
type TlsIdentity_K8SPodIdentity struct {
	// The pod_identity string is of the format:
	// {owner_name}.{owner_type}.{pod_ns}.linkerd-managed.{controller_ns}.svc.cluster.local
	PodIdentity string `protobuf:"bytes,1,opt,name=pod_identity,json=podIdentity" json:"pod_identity,omitempty"`
	// The Kubernetes namespace of the pod's Linkerd2 control plane.
	ControllerNs string `protobuf:"bytes,2,opt,name=controller_ns,json=controllerNs" json:"controller_ns,omitempty"`
}

func (m *TlsIdentity_K8SPodIdentity) Reset()                    { *m = TlsIdentity_K8SPodIdentity{} }
func (m *TlsIdentity_K8SPodIdentity) String() string            { return proto.CompactTextString(m) }
func (*TlsIdentity_K8SPodIdentity) ProtoMessage()               {}
func (*TlsIdentity_K8SPodIdentity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *TlsIdentity_K8SPodIdentity) GetPodIdentity() string {
	if m != nil {
		return m.PodIdentity
	}
	return ""
}

func (m *TlsIdentity_K8SPodIdentity) GetControllerNs() string {
	if m != nil {
		return m.ControllerNs
	}
	return ""
}

type NoEndpoints struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *NoEndpoints) Reset()                    { *m = NoEndpoints{} }
func (m *NoEndpoints) String() string            { return proto.CompactTextString(m) }
func (*NoEndpoints) ProtoMessage()               {}
func (*NoEndpoints) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NoEndpoints) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

// A hint of what protocol the service knows. The default value is
// for the `hint` field to be not be set, essentially meaning "unknown".
type ProtocolHint struct {
	// Types that are valid to be assigned to Protocol:
	//	*ProtocolHint_H2_
	Protocol isProtocolHint_Protocol `protobuf_oneof:"protocol"`
}

func (m *ProtocolHint) Reset()                    { *m = ProtocolHint{} }
func (m *ProtocolHint) String() string            { return proto.CompactTextString(m) }
func (*ProtocolHint) ProtoMessage()               {}
func (*ProtocolHint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isProtocolHint_Protocol interface{ isProtocolHint_Protocol() }

type ProtocolHint_H2_ struct {
	H2 *ProtocolHint_H2 `protobuf:"bytes,1,opt,name=h2,oneof"`
}

func (*ProtocolHint_H2_) isProtocolHint_Protocol() {}

func (m *ProtocolHint) GetProtocol() isProtocolHint_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *ProtocolHint) GetH2() *ProtocolHint_H2 {
	if x, ok := m.GetProtocol().(*ProtocolHint_H2_); ok {
		return x.H2
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ProtocolHint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ProtocolHint_OneofMarshaler, _ProtocolHint_OneofUnmarshaler, _ProtocolHint_OneofSizer, []interface{}{
		(*ProtocolHint_H2_)(nil),
	}
}

func _ProtocolHint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ProtocolHint)
	// protocol
	switch x := m.Protocol.(type) {
	case *ProtocolHint_H2_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.H2); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ProtocolHint.Protocol has unexpected type %T", x)
	}
	return nil
}

func _ProtocolHint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ProtocolHint)
	switch tag {
	case 1: // protocol.h2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProtocolHint_H2)
		err := b.DecodeMessage(msg)
		m.Protocol = &ProtocolHint_H2_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ProtocolHint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ProtocolHint)
	// protocol
	switch x := m.Protocol.(type) {
	case *ProtocolHint_H2_:
		s := proto.Size(x.H2)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ProtocolHint_H2 struct {
}

func (m *ProtocolHint_H2) Reset()                    { *m = ProtocolHint_H2{} }
func (m *ProtocolHint_H2) String() string            { return proto.CompactTextString(m) }
func (*ProtocolHint_H2) ProtoMessage()               {}
func (*ProtocolHint_H2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type DestinationProfile struct {
	// A list of routes, each with a RequestMatch.  If a request matches
	// more than one route, the first match wins.
	Routes []*Route `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
}

func (m *DestinationProfile) Reset()                    { *m = DestinationProfile{} }
func (m *DestinationProfile) String() string            { return proto.CompactTextString(m) }
func (*DestinationProfile) ProtoMessage()               {}
func (*DestinationProfile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DestinationProfile) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Route struct {
	// This route contains requests which match this condition.
	Condition *RequestMatch `protobuf:"bytes,1,opt,name=condition" json:"condition,omitempty"`
	// A list of response classes for this route.  If a response matches
	// more than one ResponseClass, the first match wins.  If a response does not
	// match any ResponseClasses, it is considered to be a successful response.
	ResponseClasses []*ResponseClass `protobuf:"bytes,2,rep,name=response_classes,json=responseClasses" json:"response_classes,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Route) GetCondition() *RequestMatch {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Route) GetResponseClasses() []*ResponseClass {
	if m != nil {
		return m.ResponseClasses
	}
	return nil
}

type ResponseClass struct {
	// This class contains responses which match this condition.
	Condition *ResponseMatch `protobuf:"bytes,1,opt,name=condition" json:"condition,omitempty"`
	// If responses in this class should be considered failures.  This defaults
	// to false (success).
	IsFailure bool `protobuf:"varint,2,opt,name=is_failure,json=isFailure" json:"is_failure,omitempty"`
}

func (m *ResponseClass) Reset()                    { *m = ResponseClass{} }
func (m *ResponseClass) String() string            { return proto.CompactTextString(m) }
func (*ResponseClass) ProtoMessage()               {}
func (*ResponseClass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ResponseClass) GetCondition() *ResponseMatch {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *ResponseClass) GetIsFailure() bool {
	if m != nil {
		return m.IsFailure
	}
	return false
}

type RequestMatch struct {
	// Types that are valid to be assigned to Match:
	//	*RequestMatch_All
	//	*RequestMatch_Any
	//	*RequestMatch_Not
	//	*RequestMatch_Path
	//	*RequestMatch_Method
	Match isRequestMatch_Match `protobuf_oneof:"match"`
}

func (m *RequestMatch) Reset()                    { *m = RequestMatch{} }
func (m *RequestMatch) String() string            { return proto.CompactTextString(m) }
func (*RequestMatch) ProtoMessage()               {}
func (*RequestMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isRequestMatch_Match interface{ isRequestMatch_Match() }

type RequestMatch_All struct {
	All *RequestMatch_Seq `protobuf:"bytes,1,opt,name=all,oneof"`
}
type RequestMatch_Any struct {
	Any *RequestMatch_Seq `protobuf:"bytes,2,opt,name=any,oneof"`
}
type RequestMatch_Not struct {
	Not *RequestMatch `protobuf:"bytes,3,opt,name=not,oneof"`
}
type RequestMatch_Path struct {
	Path *PathMatch `protobuf:"bytes,4,opt,name=path,oneof"`
}
type RequestMatch_Method struct {
	Method *io_linkerd_proxy_http_types.HttpMethod `protobuf:"bytes,5,opt,name=method,oneof"`
}

func (*RequestMatch_All) isRequestMatch_Match()    {}
func (*RequestMatch_Any) isRequestMatch_Match()    {}
func (*RequestMatch_Not) isRequestMatch_Match()    {}
func (*RequestMatch_Path) isRequestMatch_Match()   {}
func (*RequestMatch_Method) isRequestMatch_Match() {}

func (m *RequestMatch) GetMatch() isRequestMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RequestMatch) GetAll() *RequestMatch_Seq {
	if x, ok := m.GetMatch().(*RequestMatch_All); ok {
		return x.All
	}
	return nil
}

func (m *RequestMatch) GetAny() *RequestMatch_Seq {
	if x, ok := m.GetMatch().(*RequestMatch_Any); ok {
		return x.Any
	}
	return nil
}

func (m *RequestMatch) GetNot() *RequestMatch {
	if x, ok := m.GetMatch().(*RequestMatch_Not); ok {
		return x.Not
	}
	return nil
}

func (m *RequestMatch) GetPath() *PathMatch {
	if x, ok := m.GetMatch().(*RequestMatch_Path); ok {
		return x.Path
	}
	return nil
}

func (m *RequestMatch) GetMethod() *io_linkerd_proxy_http_types.HttpMethod {
	if x, ok := m.GetMatch().(*RequestMatch_Method); ok {
		return x.Method
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestMatch_OneofMarshaler, _RequestMatch_OneofUnmarshaler, _RequestMatch_OneofSizer, []interface{}{
		(*RequestMatch_All)(nil),
		(*RequestMatch_Any)(nil),
		(*RequestMatch_Not)(nil),
		(*RequestMatch_Path)(nil),
		(*RequestMatch_Method)(nil),
	}
}

func _RequestMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestMatch)
	// match
	switch x := m.Match.(type) {
	case *RequestMatch_All:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.All); err != nil {
			return err
		}
	case *RequestMatch_Any:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Any); err != nil {
			return err
		}
	case *RequestMatch_Not:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Not); err != nil {
			return err
		}
	case *RequestMatch_Path:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Path); err != nil {
			return err
		}
	case *RequestMatch_Method:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Method); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RequestMatch.Match has unexpected type %T", x)
	}
	return nil
}

func _RequestMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestMatch)
	switch tag {
	case 1: // match.all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestMatch_Seq)
		err := b.DecodeMessage(msg)
		m.Match = &RequestMatch_All{msg}
		return true, err
	case 2: // match.any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestMatch_Seq)
		err := b.DecodeMessage(msg)
		m.Match = &RequestMatch_Any{msg}
		return true, err
	case 3: // match.not
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestMatch)
		err := b.DecodeMessage(msg)
		m.Match = &RequestMatch_Not{msg}
		return true, err
	case 4: // match.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PathMatch)
		err := b.DecodeMessage(msg)
		m.Match = &RequestMatch_Path{msg}
		return true, err
	case 5: // match.method
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(io_linkerd_proxy_http_types.HttpMethod)
		err := b.DecodeMessage(msg)
		m.Match = &RequestMatch_Method{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RequestMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestMatch)
	// match
	switch x := m.Match.(type) {
	case *RequestMatch_All:
		s := proto.Size(x.All)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestMatch_Any:
		s := proto.Size(x.Any)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestMatch_Not:
		s := proto.Size(x.Not)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestMatch_Path:
		s := proto.Size(x.Path)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestMatch_Method:
		s := proto.Size(x.Method)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RequestMatch_Seq struct {
	Matches []*RequestMatch `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *RequestMatch_Seq) Reset()                    { *m = RequestMatch_Seq{} }
func (m *RequestMatch_Seq) String() string            { return proto.CompactTextString(m) }
func (*RequestMatch_Seq) ProtoMessage()               {}
func (*RequestMatch_Seq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

func (m *RequestMatch_Seq) GetMatches() []*RequestMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

type PathMatch struct {
	// Match if the request path matches this regex.
	Regex string `protobuf:"bytes,1,opt,name=regex" json:"regex,omitempty"`
}

func (m *PathMatch) Reset()                    { *m = PathMatch{} }
func (m *PathMatch) String() string            { return proto.CompactTextString(m) }
func (*PathMatch) ProtoMessage()               {}
func (*PathMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PathMatch) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

type ResponseMatch struct {
	// Types that are valid to be assigned to Match:
	//	*ResponseMatch_All
	//	*ResponseMatch_Any
	//	*ResponseMatch_Not
	//	*ResponseMatch_Status
	Match isResponseMatch_Match `protobuf_oneof:"match"`
}

func (m *ResponseMatch) Reset()                    { *m = ResponseMatch{} }
func (m *ResponseMatch) String() string            { return proto.CompactTextString(m) }
func (*ResponseMatch) ProtoMessage()               {}
func (*ResponseMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type isResponseMatch_Match interface{ isResponseMatch_Match() }

type ResponseMatch_All struct {
	All *ResponseMatch_Seq `protobuf:"bytes,1,opt,name=all,oneof"`
}
type ResponseMatch_Any struct {
	Any *ResponseMatch_Seq `protobuf:"bytes,2,opt,name=any,oneof"`
}
type ResponseMatch_Not struct {
	Not *ResponseMatch `protobuf:"bytes,3,opt,name=not,oneof"`
}
type ResponseMatch_Status struct {
	Status *HttpStatusRange `protobuf:"bytes,4,opt,name=status,oneof"`
}

func (*ResponseMatch_All) isResponseMatch_Match()    {}
func (*ResponseMatch_Any) isResponseMatch_Match()    {}
func (*ResponseMatch_Not) isResponseMatch_Match()    {}
func (*ResponseMatch_Status) isResponseMatch_Match() {}

func (m *ResponseMatch) GetMatch() isResponseMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *ResponseMatch) GetAll() *ResponseMatch_Seq {
	if x, ok := m.GetMatch().(*ResponseMatch_All); ok {
		return x.All
	}
	return nil
}

func (m *ResponseMatch) GetAny() *ResponseMatch_Seq {
	if x, ok := m.GetMatch().(*ResponseMatch_Any); ok {
		return x.Any
	}
	return nil
}

func (m *ResponseMatch) GetNot() *ResponseMatch {
	if x, ok := m.GetMatch().(*ResponseMatch_Not); ok {
		return x.Not
	}
	return nil
}

func (m *ResponseMatch) GetStatus() *HttpStatusRange {
	if x, ok := m.GetMatch().(*ResponseMatch_Status); ok {
		return x.Status
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ResponseMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ResponseMatch_OneofMarshaler, _ResponseMatch_OneofUnmarshaler, _ResponseMatch_OneofSizer, []interface{}{
		(*ResponseMatch_All)(nil),
		(*ResponseMatch_Any)(nil),
		(*ResponseMatch_Not)(nil),
		(*ResponseMatch_Status)(nil),
	}
}

func _ResponseMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ResponseMatch)
	// match
	switch x := m.Match.(type) {
	case *ResponseMatch_All:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.All); err != nil {
			return err
		}
	case *ResponseMatch_Any:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Any); err != nil {
			return err
		}
	case *ResponseMatch_Not:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Not); err != nil {
			return err
		}
	case *ResponseMatch_Status:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ResponseMatch.Match has unexpected type %T", x)
	}
	return nil
}

func _ResponseMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ResponseMatch)
	switch tag {
	case 1: // match.all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseMatch_Seq)
		err := b.DecodeMessage(msg)
		m.Match = &ResponseMatch_All{msg}
		return true, err
	case 2: // match.any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseMatch_Seq)
		err := b.DecodeMessage(msg)
		m.Match = &ResponseMatch_Any{msg}
		return true, err
	case 3: // match.not
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseMatch)
		err := b.DecodeMessage(msg)
		m.Match = &ResponseMatch_Not{msg}
		return true, err
	case 4: // match.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpStatusRange)
		err := b.DecodeMessage(msg)
		m.Match = &ResponseMatch_Status{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ResponseMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ResponseMatch)
	// match
	switch x := m.Match.(type) {
	case *ResponseMatch_All:
		s := proto.Size(x.All)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseMatch_Any:
		s := proto.Size(x.Any)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseMatch_Not:
		s := proto.Size(x.Not)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ResponseMatch_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResponseMatch_Seq struct {
	Matches []*ResponseMatch `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *ResponseMatch_Seq) Reset()                    { *m = ResponseMatch_Seq{} }
func (m *ResponseMatch_Seq) String() string            { return proto.CompactTextString(m) }
func (*ResponseMatch_Seq) ProtoMessage()               {}
func (*ResponseMatch_Seq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

func (m *ResponseMatch_Seq) GetMatches() []*ResponseMatch {
	if m != nil {
		return m.Matches
	}
	return nil
}

// If either a minimum or maximum is not specified, the range is considered to be
// over a discrete value.
type HttpStatusRange struct {
	// Types that are valid to be assigned to Match:
	//	*HttpStatusRange_Min
	//	*HttpStatusRange_Max
	Match isHttpStatusRange_Match `protobuf_oneof:"match"`
}

func (m *HttpStatusRange) Reset()                    { *m = HttpStatusRange{} }
func (m *HttpStatusRange) String() string            { return proto.CompactTextString(m) }
func (*HttpStatusRange) ProtoMessage()               {}
func (*HttpStatusRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isHttpStatusRange_Match interface{ isHttpStatusRange_Match() }

type HttpStatusRange_Min struct {
	Min uint32 `protobuf:"varint,1,opt,name=min,oneof"`
}
type HttpStatusRange_Max struct {
	Max uint32 `protobuf:"varint,2,opt,name=max,oneof"`
}

func (*HttpStatusRange_Min) isHttpStatusRange_Match() {}
func (*HttpStatusRange_Max) isHttpStatusRange_Match() {}

func (m *HttpStatusRange) GetMatch() isHttpStatusRange_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HttpStatusRange) GetMin() uint32 {
	if x, ok := m.GetMatch().(*HttpStatusRange_Min); ok {
		return x.Min
	}
	return 0
}

func (m *HttpStatusRange) GetMax() uint32 {
	if x, ok := m.GetMatch().(*HttpStatusRange_Max); ok {
		return x.Max
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpStatusRange) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpStatusRange_OneofMarshaler, _HttpStatusRange_OneofUnmarshaler, _HttpStatusRange_OneofSizer, []interface{}{
		(*HttpStatusRange_Min)(nil),
		(*HttpStatusRange_Max)(nil),
	}
}

func _HttpStatusRange_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpStatusRange)
	// match
	switch x := m.Match.(type) {
	case *HttpStatusRange_Min:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Min))
	case *HttpStatusRange_Max:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Max))
	case nil:
	default:
		return fmt.Errorf("HttpStatusRange.Match has unexpected type %T", x)
	}
	return nil
}

func _HttpStatusRange_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpStatusRange)
	switch tag {
	case 1: // match.min
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Match = &HttpStatusRange_Min{uint32(x)}
		return true, err
	case 2: // match.max
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Match = &HttpStatusRange_Max{uint32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _HttpStatusRange_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpStatusRange)
	// match
	switch x := m.Match.(type) {
	case *HttpStatusRange_Min:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Min))
	case *HttpStatusRange_Max:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Max))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GetDestination)(nil), "io.linkerd.proxy.destination.GetDestination")
	proto.RegisterType((*Update)(nil), "io.linkerd.proxy.destination.Update")
	proto.RegisterType((*AddrSet)(nil), "io.linkerd.proxy.destination.AddrSet")
	proto.RegisterType((*WeightedAddrSet)(nil), "io.linkerd.proxy.destination.WeightedAddrSet")
	proto.RegisterType((*WeightedAddr)(nil), "io.linkerd.proxy.destination.WeightedAddr")
	proto.RegisterType((*TlsIdentity)(nil), "io.linkerd.proxy.destination.TlsIdentity")
	proto.RegisterType((*TlsIdentity_K8SPodIdentity)(nil), "io.linkerd.proxy.destination.TlsIdentity.K8sPodIdentity")
	proto.RegisterType((*NoEndpoints)(nil), "io.linkerd.proxy.destination.NoEndpoints")
	proto.RegisterType((*ProtocolHint)(nil), "io.linkerd.proxy.destination.ProtocolHint")
	proto.RegisterType((*ProtocolHint_H2)(nil), "io.linkerd.proxy.destination.ProtocolHint.H2")
	proto.RegisterType((*DestinationProfile)(nil), "io.linkerd.proxy.destination.DestinationProfile")
	proto.RegisterType((*Route)(nil), "io.linkerd.proxy.destination.Route")
	proto.RegisterType((*ResponseClass)(nil), "io.linkerd.proxy.destination.ResponseClass")
	proto.RegisterType((*RequestMatch)(nil), "io.linkerd.proxy.destination.RequestMatch")
	proto.RegisterType((*RequestMatch_Seq)(nil), "io.linkerd.proxy.destination.RequestMatch.Seq")
	proto.RegisterType((*PathMatch)(nil), "io.linkerd.proxy.destination.PathMatch")
	proto.RegisterType((*ResponseMatch)(nil), "io.linkerd.proxy.destination.ResponseMatch")
	proto.RegisterType((*ResponseMatch_Seq)(nil), "io.linkerd.proxy.destination.ResponseMatch.Seq")
	proto.RegisterType((*HttpStatusRange)(nil), "io.linkerd.proxy.destination.HttpStatusRange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Destination service

type DestinationClient interface {
	// Given a destination, return all addresses in that destination as a long-
	// running stream of updates.
	Get(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (Destination_GetClient, error)
	// Given a destination, return that destination's profile and send an update
	// whenever it changes.
	GetProfile(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (Destination_GetProfileClient, error)
}

type destinationClient struct {
	cc *grpc.ClientConn
}

func NewDestinationClient(cc *grpc.ClientConn) DestinationClient {
	return &destinationClient{cc}
}

func (c *destinationClient) Get(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (Destination_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Destination_serviceDesc.Streams[0], c.cc, "/io.linkerd.proxy.destination.Destination/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &destinationGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Destination_GetClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type destinationGetClient struct {
	grpc.ClientStream
}

func (x *destinationGetClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *destinationClient) GetProfile(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (Destination_GetProfileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Destination_serviceDesc.Streams[1], c.cc, "/io.linkerd.proxy.destination.Destination/GetProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &destinationGetProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Destination_GetProfileClient interface {
	Recv() (*DestinationProfile, error)
	grpc.ClientStream
}

type destinationGetProfileClient struct {
	grpc.ClientStream
}

func (x *destinationGetProfileClient) Recv() (*DestinationProfile, error) {
	m := new(DestinationProfile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Destination service

type DestinationServer interface {
	// Given a destination, return all addresses in that destination as a long-
	// running stream of updates.
	Get(*GetDestination, Destination_GetServer) error
	// Given a destination, return that destination's profile and send an update
	// whenever it changes.
	GetProfile(*GetDestination, Destination_GetProfileServer) error
}

func RegisterDestinationServer(s *grpc.Server, srv DestinationServer) {
	s.RegisterService(&_Destination_serviceDesc, srv)
}

func _Destination_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDestination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DestinationServer).Get(m, &destinationGetServer{stream})
}

type Destination_GetServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type destinationGetServer struct {
	grpc.ServerStream
}

func (x *destinationGetServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

func _Destination_GetProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDestination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DestinationServer).GetProfile(m, &destinationGetProfileServer{stream})
}

type Destination_GetProfileServer interface {
	Send(*DestinationProfile) error
	grpc.ServerStream
}

type destinationGetProfileServer struct {
	grpc.ServerStream
}

func (x *destinationGetProfileServer) Send(m *DestinationProfile) error {
	return x.ServerStream.SendMsg(m)
}

var _Destination_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.destination.Destination",
	HandlerType: (*DestinationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Destination_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProfile",
			Handler:       _Destination_GetProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "destination.proto",
}

func init() { proto.RegisterFile("destination.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x7a, 0x13, 0x27, 0x39, 0xb6, 0x93, 0x74, 0x84, 0x90, 0x65, 0x81, 0x94, 0x6e, 0xa9,
	0x28, 0x97, 0x6c, 0x2a, 0x53, 0x55, 0x11, 0x14, 0x42, 0x9c, 0x86, 0xb8, 0x6a, 0x12, 0xc2, 0xa6,
	0x5c, 0x84, 0x84, 0xac, 0x89, 0xf7, 0xd4, 0x3b, 0xca, 0x7a, 0x66, 0xb3, 0x33, 0x2e, 0xf1, 0xaf,
	0xe1, 0x99, 0x17, 0xfe, 0x0f, 0x2f, 0x3c, 0xf2, 0x23, 0xfa, 0x84, 0x66, 0x76, 0xb6, 0x5e, 0xc7,
	0xc8, 0x97, 0xf6, 0x69, 0xf7, 0x1c, 0x9d, 0xef, 0x3b, 0xd7, 0x39, 0x33, 0x70, 0x27, 0x44, 0xa9,
	0x18, 0xa7, 0x8a, 0x09, 0xee, 0x27, 0xa9, 0x50, 0x82, 0x7c, 0xc0, 0x84, 0x1f, 0x33, 0x7e, 0x85,
	0x69, 0xa8, 0x35, 0x37, 0x43, 0xbf, 0x60, 0xd3, 0xd8, 0x8a, 0x94, 0x4a, 0x3a, 0x6a, 0x98, 0xa0,
	0xcc, 0xec, 0x1b, 0xeb, 0x1c, 0x55, 0xf6, 0xeb, 0x3d, 0x81, 0x8d, 0x63, 0x54, 0x4f, 0x47, 0xe6,
	0xe4, 0x7d, 0x28, 0xcb, 0x6e, 0x84, 0x7d, 0xac, 0x3b, 0xdb, 0xce, 0x83, 0xf5, 0xc0, 0x4a, 0x84,
	0xc0, 0x72, 0x42, 0x55, 0x54, 0x2f, 0x19, 0xad, 0xf9, 0xf7, 0xfe, 0x75, 0xa0, 0xfc, 0x63, 0x12,
	0x52, 0x85, 0xe4, 0x00, 0x5c, 0x1a, 0x86, 0x06, 0x53, 0x69, 0xee, 0xf8, 0xd3, 0x22, 0xf2, 0x7f,
	0x46, 0xd6, 0x8b, 0x14, 0x86, 0x07, 0x61, 0x98, 0x5e, 0xa0, 0x6a, 0x2f, 0x05, 0x1a, 0x4b, 0xf6,
	0xa1, 0x9c, 0x62, 0x5f, 0xbc, 0x42, 0xe3, 0xa3, 0xd2, 0xbc, 0x3f, 0x9d, 0x65, 0x84, 0xb6, 0x30,
	0x72, 0x06, 0x55, 0x2e, 0x3a, 0xc8, 0xc3, 0x44, 0x30, 0xae, 0x64, 0xdd, 0x35, 0x34, 0x9f, 0x4c,
	0xa7, 0x39, 0x13, 0x47, 0x39, 0xa0, 0xbd, 0x14, 0x54, 0xf8, 0x48, 0x6c, 0xad, 0x41, 0x79, 0x60,
	0xb2, 0xf3, 0x0e, 0x60, 0xd5, 0xba, 0x23, 0x8f, 0x61, 0x85, 0x86, 0x61, 0x2a, 0xeb, 0xce, 0xb6,
	0xfb, 0xa0, 0xd2, 0xdc, 0x9e, 0x64, 0xd7, 0xd5, 0x7d, 0xd1, 0x4d, 0x34, 0x00, 0xa5, 0x0c, 0x32,
	0x73, 0xef, 0xb5, 0x03, 0x9b, 0xb7, 0x12, 0x27, 0xdf, 0x8e, 0x73, 0x7d, 0x3a, 0x7f, 0xd9, 0x2c,
	0x2b, 0x09, 0xa1, 0xd6, 0x47, 0x95, 0xb2, 0x6e, 0x27, 0xa6, 0x97, 0x18, 0xcb, 0x7a, 0xc9, 0x30,
	0xed, 0x2f, 0xd4, 0x00, 0xff, 0xd4, 0x50, 0x9c, 0x18, 0x86, 0x23, 0xae, 0xd2, 0x61, 0x50, 0xed,
	0x17, 0x54, 0x8d, 0x7d, 0xb8, 0x33, 0x61, 0x42, 0xb6, 0xc0, 0xbd, 0xc2, 0xa1, 0x9d, 0x12, 0xfd,
	0x4b, 0xde, 0x83, 0x95, 0x57, 0x34, 0x1e, 0xa0, 0x9d, 0x91, 0x4c, 0xf8, 0xb2, 0xb4, 0xe7, 0x78,
	0x7f, 0xb8, 0x50, 0x2d, 0x3a, 0x25, 0x8f, 0x60, 0x59, 0x27, 0x60, 0xe7, 0x65, 0x76, 0x11, 0x8d,
	0xb5, 0x9e, 0xcd, 0xdf, 0x0d, 0x8b, 0x69, 0x6d, 0x2d, 0xb0, 0x12, 0xa1, 0xb7, 0xab, 0xb0, 0x6c,
	0xaa, 0xf0, 0x64, 0xfe, 0x2a, 0xcc, 0x2a, 0x01, 0x39, 0x81, 0xaa, 0x8a, 0x65, 0x87, 0x85, 0xc8,
	0x15, 0x53, 0xc3, 0xfa, 0xca, 0x3c, 0xb3, 0xf5, 0x22, 0x96, 0xcf, 0x2c, 0x20, 0xa8, 0xa8, 0x91,
	0x40, 0xbe, 0x87, 0x9a, 0x39, 0x7f, 0x5d, 0x11, 0x77, 0x22, 0xc6, 0x55, 0xbd, 0x6c, 0xe8, 0x66,
	0x0c, 0xc0, 0xb9, 0x85, 0xb4, 0x19, 0x57, 0x41, 0x35, 0x29, 0x48, 0xef, 0xde, 0xa1, 0xbf, 0x1d,
	0xa8, 0x14, 0xc2, 0x25, 0x21, 0x6c, 0x5d, 0xed, 0xc9, 0x4e, 0x22, 0xc2, 0x51, 0xce, 0xd9, 0xb1,
	0xdc, 0x9b, 0x3b, 0x67, 0xff, 0xf9, 0x9e, 0x3c, 0x17, 0x61, 0x2e, 0xb6, 0x97, 0x82, 0x8d, 0xab,
	0x31, 0x4d, 0xe3, 0x17, 0xd8, 0x18, 0xb7, 0x21, 0x77, 0xa1, 0x3a, 0xe6, 0x33, 0x0b, 0xbe, 0x92,
	0x14, 0x4c, 0xee, 0x41, 0xad, 0x2b, 0xb8, 0x4a, 0x45, 0x1c, 0x63, 0xda, 0xe1, 0xd2, 0x26, 0x53,
	0x1d, 0x29, 0xcf, 0x64, 0x0b, 0x60, 0x4d, 0xaa, 0x94, 0x2a, 0xec, 0x0d, 0xbd, 0xfb, 0x50, 0x29,
	0x9c, 0x72, 0x3d, 0x45, 0x78, 0xc3, 0xa4, 0x92, 0x86, 0x7c, 0x2d, 0xb0, 0x92, 0x47, 0xa1, 0x5a,
	0xac, 0x30, 0xd9, 0x87, 0x52, 0xd4, 0x9c, 0x6f, 0xa3, 0x15, 0x71, 0x7e, 0xbb, 0xd9, 0x5e, 0x0a,
	0x4a, 0x51, 0xb3, 0xb1, 0x0c, 0xa5, 0x76, 0x53, 0x47, 0x92, 0xb7, 0xca, 0xfb, 0x01, 0x48, 0x61,
	0xd7, 0x9e, 0xa7, 0xe2, 0x25, 0x8b, 0x91, 0x7c, 0x05, 0xe5, 0x54, 0x0c, 0x14, 0xe6, 0x7b, 0xe0,
	0xde, 0x74, 0x67, 0x81, 0xb6, 0x0d, 0x2c, 0xc4, 0xfb, 0xd3, 0x81, 0x15, 0xa3, 0x21, 0x6d, 0x58,
	0xef, 0x0a, 0x1e, 0x32, 0x6d, 0x64, 0xc3, 0x9e, 0x31, 0x50, 0x01, 0x5e, 0x0f, 0x50, 0xaa, 0x53,
	0xaa, 0xba, 0x51, 0x30, 0x02, 0x93, 0x9f, 0x60, 0x2b, 0x45, 0x99, 0x08, 0x2e, 0xb1, 0xd3, 0x8d,
	0xa9, 0x94, 0x98, 0x2f, 0x96, 0xcf, 0x66, 0x11, 0x66, 0xa8, 0x43, 0x0d, 0x0a, 0x36, 0xd3, 0xa2,
	0x88, 0xd2, 0x1b, 0x42, 0x6d, 0xcc, 0x82, 0x3c, 0x9b, 0x0c, 0x79, 0x4e, 0x0f, 0x13, 0x31, 0x7f,
	0x08, 0xc0, 0x64, 0xe7, 0x25, 0x65, 0xf1, 0x20, 0xcd, 0xe6, 0x7b, 0x2d, 0x58, 0x67, 0xf2, 0xbb,
	0x4c, 0xe1, 0xfd, 0xe5, 0x42, 0xb5, 0x98, 0x2e, 0x69, 0x81, 0x4b, 0xe3, 0xd8, 0x3a, 0xf5, 0xe7,
	0xaf, 0x93, 0x7f, 0x81, 0xd7, 0xe6, 0xc6, 0x8a, 0x63, 0xc3, 0xc1, 0xf3, 0x73, 0xf1, 0x36, 0x1c,
	0x7c, 0x48, 0xbe, 0x01, 0x97, 0x0b, 0x65, 0xef, 0xaa, 0x05, 0xfa, 0xa5, 0xf1, 0x5c, 0x28, 0xf2,
	0xb5, 0xbd, 0x97, 0x97, 0x0d, 0xc1, 0xc7, 0x33, 0xe6, 0x94, 0xaa, 0x28, 0x47, 0x1b, 0x18, 0x39,
	0x80, 0x72, 0x1f, 0x55, 0x24, 0x42, 0xbb, 0xd1, 0xfe, 0x87, 0xa0, 0xf0, 0x7e, 0x68, 0x2b, 0x95,
	0x9c, 0x1a, 0x73, 0x7d, 0xed, 0x66, 0xc0, 0xc6, 0x73, 0x70, 0x2f, 0xf0, 0x9a, 0x3c, 0x85, 0xd5,
	0xbe, 0xa6, 0xc6, 0x39, 0xaf, 0xb3, 0xb1, 0xe1, 0xcb, 0xa1, 0xad, 0x55, 0x58, 0x31, 0xbf, 0xde,
	0x5d, 0x58, 0x7f, 0x13, 0xad, 0xde, 0x5b, 0x29, 0xf6, 0xf0, 0xc6, 0xae, 0x83, 0x4c, 0xf0, 0x5e,
	0x97, 0x46, 0xf3, 0x94, 0xd9, 0x1d, 0x16, 0x9b, 0xba, 0xbb, 0xc0, 0x24, 0x15, 0xbb, 0x7a, 0x58,
	0xec, 0xea, 0x5b, 0x91, 0xf0, 0x21, 0xd9, 0x2f, 0xb6, 0x75, 0x91, 0x99, 0xce, 0xfb, 0x7a, 0x0c,
	0x65, 0xa9, 0xa8, 0x1a, 0x48, 0xdb, 0xd9, 0x19, 0x1b, 0x48, 0x77, 0xe6, 0xc2, 0xd8, 0x07, 0x94,
	0xf7, 0x50, 0xb7, 0x27, 0x83, 0x37, 0x4e, 0xb2, 0xf6, 0x1c, 0xdd, 0x6e, 0xcf, 0x42, 0x07, 0x6d,
	0xb2, 0x3f, 0x2d, 0xd8, 0xbc, 0xe5, 0x93, 0x10, 0x70, 0xfb, 0x2c, 0x3b, 0xc7, 0x35, 0x9d, 0x46,
	0x9f, 0x71, 0xa3, 0xa3, 0x37, 0xa6, 0x98, 0x99, 0x8e, 0xde, 0xbc, 0xe1, 0x68, 0xfe, 0xe3, 0x40,
	0xa5, 0xf8, 0xf6, 0xfc, 0x0d, 0xdc, 0x63, 0x54, 0xe4, 0xf3, 0xe9, 0x91, 0x8d, 0x3f, 0x58, 0x1b,
	0x1f, 0x4d, 0xb7, 0xce, 0xde, 0xa7, 0xde, 0xd2, 0x43, 0x87, 0x24, 0x00, 0xc7, 0xa8, 0xf2, 0xad,
	0xbb, 0x98, 0x97, 0x87, 0xd3, 0xad, 0x27, 0xb7, 0xba, 0xf6, 0xd8, 0x7a, 0xfc, 0xeb, 0xa3, 0x1e,
	0x53, 0xd1, 0xe0, 0xd2, 0xef, 0x8a, 0xfe, 0xae, 0x85, 0xe7, 0xdf, 0xe6, 0x8e, 0xe1, 0xd9, 0xa1,
	0x09, 0xdb, 0xed, 0x89, 0xdd, 0x02, 0xdd, 0x65, 0xd9, 0xdc, 0x18, 0x5f, 0xfc, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x46, 0xe3, 0x0e, 0xe2, 0xed, 0x0b, 0x00, 0x00,
}
