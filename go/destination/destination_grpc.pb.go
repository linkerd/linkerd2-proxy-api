// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: destination.proto

package destination

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Destination_Get_FullMethodName        = "/io.linkerd.proxy.destination.Destination/Get"
	Destination_GetProfile_FullMethodName = "/io.linkerd.proxy.destination.Destination/GetProfile"
)

// DestinationClient is the client API for Destination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DestinationClient interface {
	// Given a destination, return all addresses in that destination as a long-
	// running stream of updates.
	Get(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Update], error)
	// Given a destination, return that destination's profile and send an update
	// whenever it changes.
	GetProfile(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DestinationProfile], error)
}

type destinationClient struct {
	cc grpc.ClientConnInterface
}

func NewDestinationClient(cc grpc.ClientConnInterface) DestinationClient {
	return &destinationClient{cc}
}

func (c *destinationClient) Get(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Update], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Destination_ServiceDesc.Streams[0], Destination_Get_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDestination, Update]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Destination_GetClient = grpc.ServerStreamingClient[Update]

func (c *destinationClient) GetProfile(ctx context.Context, in *GetDestination, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DestinationProfile], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Destination_ServiceDesc.Streams[1], Destination_GetProfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDestination, DestinationProfile]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Destination_GetProfileClient = grpc.ServerStreamingClient[DestinationProfile]

// DestinationServer is the server API for Destination service.
// All implementations must embed UnimplementedDestinationServer
// for forward compatibility.
type DestinationServer interface {
	// Given a destination, return all addresses in that destination as a long-
	// running stream of updates.
	Get(*GetDestination, grpc.ServerStreamingServer[Update]) error
	// Given a destination, return that destination's profile and send an update
	// whenever it changes.
	GetProfile(*GetDestination, grpc.ServerStreamingServer[DestinationProfile]) error
	mustEmbedUnimplementedDestinationServer()
}

// UnimplementedDestinationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDestinationServer struct{}

func (UnimplementedDestinationServer) Get(*GetDestination, grpc.ServerStreamingServer[Update]) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDestinationServer) GetProfile(*GetDestination, grpc.ServerStreamingServer[DestinationProfile]) error {
	return status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedDestinationServer) mustEmbedUnimplementedDestinationServer() {}
func (UnimplementedDestinationServer) testEmbeddedByValue()                     {}

// UnsafeDestinationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DestinationServer will
// result in compilation errors.
type UnsafeDestinationServer interface {
	mustEmbedUnimplementedDestinationServer()
}

func RegisterDestinationServer(s grpc.ServiceRegistrar, srv DestinationServer) {
	// If the following call pancis, it indicates UnimplementedDestinationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Destination_ServiceDesc, srv)
}

func _Destination_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDestination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DestinationServer).Get(m, &grpc.GenericServerStream[GetDestination, Update]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Destination_GetServer = grpc.ServerStreamingServer[Update]

func _Destination_GetProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDestination)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DestinationServer).GetProfile(m, &grpc.GenericServerStream[GetDestination, DestinationProfile]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Destination_GetProfileServer = grpc.ServerStreamingServer[DestinationProfile]

// Destination_ServiceDesc is the grpc.ServiceDesc for Destination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Destination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.linkerd.proxy.destination.Destination",
	HandlerType: (*DestinationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Destination_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProfile",
			Handler:       _Destination_GetProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "destination.proto",
}
