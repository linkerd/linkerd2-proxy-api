syntax = "proto3";

package io.linkerd.proxy.outbound;

option go_package = "github.com/linkerd/linkerd2-proxy-api/go/outbound";

import "net.proto";
import "destination.proto";
import "meta.proto";
import "http_route.proto";

service OutboundPolicies {
  rpc Get(TargetSpec) returns (Service) {}

  rpc Watch(TargetSpec) returns (stream Service) {}
}

message TargetSpec {
  // Identifies the source proxy workload (e.g., pod name).
  string workload = 1;

  // Target address
  io.linkerd.proxy.net.IPAddress address = 2;

  // Target port
  uint32 port = 3;
}

message Service {
  repeated HttpRoute http_routes = 1;

  // Backends for this service. Can be overridden by backends specified
  // in a matching route.
  repeated Backend backends = 2;
}

// Outbound-specific HTTP route configuration (based on the [Gateway API][api]).
//
// [api]: https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRoute
message HttpRoute {
  io.linkerd.proxy.meta.Metadata metadata = 1;

  // If empty, the host value is ignored.
  repeated io.linkerd.proxy.http_route.HostMatch hosts = 2;

  // Must have at least one rule.
  repeated Rule rules = 3;

  message Rule {
    repeated io.linkerd.proxy.http_route.HttpRouteMatch matches = 1;
    repeated Backend backends = 2;
  }
}

message Backend {
  oneof backend {
    io.linkerd.proxy.destination.WeightedDst dst = 1;
    io.linkerd.proxy.destination.WeightedAddr endpoint = 2;
  }
}
