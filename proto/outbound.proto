syntax = "proto3";

package io.linkerd.proxy.outbound;

option go_package = "github.com/linkerd/linkerd2-proxy-api/go/outbound";

import "net.proto";
import "destination.proto";
import "meta.proto";
import "http_route.proto";
import "google/protobuf/duration.proto";

service OutboundPolicies {
  rpc Get(TargetSpec) returns (OutboundPolicy) {}

  rpc Watch(TargetSpec) returns (stream OutboundPolicy) {}
}

message TargetSpec {
  // Identifies the source proxy workload (e.g., pod name).
  string workload = 1;


  oneof target {
    // Target address. This may be the cluster IP of a Kubernetes Service or the
    // IP of a Pod.
    io.linkerd.proxy.net.IPAddress address = 2;
    string authority = 3;
  }

  // Target port
  uint32 port = 4;
}

// Outbound policy for a given target address.
message OutboundPolicy {
  // Indicates the protocol to use for this target.  This will be set to Opaque
  // if the target has been marked as opaque and will be Discover otherwise.
  ProxyProtocol protocol = 1;

  // The backend to use for this target.  If the target is a Service, the
  // backend will be a Dst containing the FQDN of the Service.  If the target
  // is a Pod, it will be an endpoint address.
  Backend backend = 2;
}

message ProxyProtocol {
  oneof kind {
    Detect detect = 1;
    Opaque opaque = 2;
  }

  message Detect {
    // Protocol detection timeout.
    google.protobuf.Duration timeout = 1;

    // Policy to use if the protocol is detected as HTTP1.
    Http1 http1 = 2;

    // Policy to use if the protocol is detected as HTTP2.
    Http2 http2 = 3;
  }

  message Opaque {}

  message Http1 {
    repeated HttpRoute http_routes = 1;
  }

  message Http2 {
    repeated HttpRoute http_routes = 1;
  }
}

// Outbound-specific HTTP route configuration (based on the [Gateway API][api]).
//
// [api]: https://gateway-api.sigs.k8s.io/v1alpha2/references/spec/#gateway.networking.k8s.io/v1alpha2.HTTPRoute
message HttpRoute {
  io.linkerd.proxy.meta.Metadata metadata = 1;

  // If empty, the host value is ignored.
  repeated io.linkerd.proxy.http_route.HostMatch hosts = 2;

  // Must have at least one rule.
  repeated Rule rules = 3;

  message Rule {
    repeated io.linkerd.proxy.http_route.HttpRouteMatch matches = 1;
    repeated Filter filters = 2;
    Distribution backends = 3;
  }
}

message Filter {
  oneof kind {
    io.linkerd.proxy.http_route.HttpFailureInjector failure_injector = 1;
  }
}

message Distribution {
  oneof distribution {
    Empty empty = 1;
    FirstAvailable first_available = 2;
    RandomAvailable random_available = 3;
  }

  message Empty {}
  message FirstAvailable {
    // Use the first available backend in the list; weights are ignored.
    repeated Backend backends = 1;
  }
  message RandomAvailable {
    repeated Backend backends = 1;
  }
}

message Backend {
  repeated Filter filters = 1;

  oneof backend {
    io.linkerd.proxy.destination.WeightedDst balancer = 2;
    io.linkerd.proxy.destination.WeightedAddr forward = 3;
  }
}
